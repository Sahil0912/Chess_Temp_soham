{"{\"assumptions\":{},\"sourceRoot\":\"/home/bayern/Chess_Temp/test/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/bayern/Chess_Temp\",\"filename\":\"/home/bayern/Chess_Temp/test/setup.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/bayern/Chess_Temp\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-duplicate-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regexp-modifiers\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$3\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$4\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$5\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$6\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$7\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$8\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$9\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$10\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$11\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$12\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$16\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$17\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.26.10:development":{"value":{"code":"\"use strict\";\n\nconst {\n  JSDOM\n} = require('jsdom');\nconst dom = new JSDOM(`\n  <!DOCTYPE html>\n  <html>\n    <body>\n      <button id=\"startGame\"></button>\n      <div id=\"chessboard\"></div>\n      <div id=\"promotionModal\"></div>\n      <!-- Add other required elements from your HTML -->\n    </body>\n  </html>\n`, {\n  url: 'http://localhost'\n});\nglobal.window = dom.window;\nglobal.document = dom.window.document;\nglobal.navigator = dom.window.navigator;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJKU0RPTSIsInJlcXVpcmUiLCJkb20iLCJ1cmwiLCJnbG9iYWwiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIm5hdmlnYXRvciJdLCJzb3VyY2VSb290IjoiL2hvbWUvYmF5ZXJuL0NoZXNzX1RlbXAvdGVzdC8iLCJzb3VyY2VzIjpbInNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgSlNET00gfSA9IHJlcXVpcmUoJ2pzZG9tJyk7XG5cbmNvbnN0IGRvbSA9IG5ldyBKU0RPTShgXG4gIDwhRE9DVFlQRSBodG1sPlxuICA8aHRtbD5cbiAgICA8Ym9keT5cbiAgICAgIDxidXR0b24gaWQ9XCJzdGFydEdhbWVcIj48L2J1dHRvbj5cbiAgICAgIDxkaXYgaWQ9XCJjaGVzc2JvYXJkXCI+PC9kaXY+XG4gICAgICA8ZGl2IGlkPVwicHJvbW90aW9uTW9kYWxcIj48L2Rpdj5cbiAgICAgIDwhLS0gQWRkIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzIGZyb20geW91ciBIVE1MIC0tPlxuICAgIDwvYm9keT5cbiAgPC9odG1sPlxuYCwgeyB1cmw6ICdodHRwOi8vbG9jYWxob3N0JyB9KTtcblxuZ2xvYmFsLndpbmRvdyA9IGRvbS53aW5kb3c7XG5nbG9iYWwuZG9jdW1lbnQgPSBkb20ud2luZG93LmRvY3VtZW50O1xuZ2xvYmFsLm5hdmlnYXRvciA9IGRvbS53aW5kb3cubmF2aWdhdG9yOyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNO0VBQUVBO0FBQU0sQ0FBQyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBRWxDLE1BQU1DLEdBQUcsR0FBRyxJQUFJRixLQUFLLENBQUM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFFO0VBQUVHLEdBQUcsRUFBRTtBQUFtQixDQUFDLENBQUM7QUFFL0JDLE1BQU0sQ0FBQ0MsTUFBTSxHQUFHSCxHQUFHLENBQUNHLE1BQU07QUFDMUJELE1BQU0sQ0FBQ0UsUUFBUSxHQUFHSixHQUFHLENBQUNHLE1BQU0sQ0FBQ0MsUUFBUTtBQUNyQ0YsTUFBTSxDQUFDRyxTQUFTLEdBQUdMLEdBQUcsQ0FBQ0csTUFBTSxDQUFDRSxTQUFTIiwiaWdub3JlTGlzdCI6W119","map":{"version":3,"names":["JSDOM","require","dom","url","global","window","document","navigator"],"sourceRoot":"/home/bayern/Chess_Temp/test/","sources":["setup.js"],"sourcesContent":["const { JSDOM } = require('jsdom');\n\nconst dom = new JSDOM(`\n  <!DOCTYPE html>\n  <html>\n    <body>\n      <button id=\"startGame\"></button>\n      <div id=\"chessboard\"></div>\n      <div id=\"promotionModal\"></div>\n      <!-- Add other required elements from your HTML -->\n    </body>\n  </html>\n`, { url: 'http://localhost' });\n\nglobal.window = dom.window;\nglobal.document = dom.window.document;\nglobal.navigator = dom.window.navigator;"],"mappings":";;AAAA,MAAM;EAAEA;AAAM,CAAC,GAAGC,OAAO,CAAC,OAAO,CAAC;AAElC,MAAMC,GAAG,GAAG,IAAIF,KAAK,CAAC;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAE;EAAEG,GAAG,EAAE;AAAmB,CAAC,CAAC;AAE/BC,MAAM,CAACC,MAAM,GAAGH,GAAG,CAACG,MAAM;AAC1BD,MAAM,CAACE,QAAQ,GAAGJ,GAAG,CAACG,MAAM,CAACC,QAAQ;AACrCF,MAAM,CAACG,SAAS,GAAGL,GAAG,CAACG,MAAM,CAACE,SAAS","ignoreList":[]}},"mtime":1743325417691},"{\"assumptions\":{},\"sourceRoot\":\"/home/bayern/Chess_Temp/test/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/bayern/Chess_Temp\",\"filename\":\"/home/bayern/Chess_Temp/test/game.test.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/bayern/Chess_Temp\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-duplicate-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regexp-modifiers\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$3\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$4\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$5\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$6\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$7\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$8\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$9\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$10\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$11\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$12\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$16\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$17\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.26.10:development":{"value":{"code":"\"use strict\";\n\nconst {\n  expect\n} = require('chai');\nlet {\n  isPrime,\n  generateRookMoves,\n  generatePawnMoves,\n  isLegalMove,\n  initializeBoard,\n  checkForCheckmate,\n  isSquareAttacked,\n  serializeBoard,\n  cloneBoard,\n  getOpponent,\n  isInBounds,\n  isKingSafe,\n  performCastle,\n  canCastle,\n  isEnPassantMove,\n  generateMovesForPiece,\n  createPiece,\n  enPassantTarget\n} = require('../gameController');\ndescribe('Chess Game Tests', () => {\n  let testBoard;\n  before(() => {\n    // Create a fresh board with just the pieces we need for testing\n    testBoard = Array(8).fill().map(() => Array(8).fill(null));\n  });\n  beforeEach(() => {\n    testBoard = initializeBoard();\n  });\n  describe('Prime Number Validation', () => {\n    it('should identify prime numbers correctly', () => {\n      expect(isPrime(2)).to.be.true;\n      expect(isPrime(7)).to.be.true;\n      expect(isPrime(1)).to.be.false;\n      expect(isPrime(4)).to.be.false;\n      expect(isPrime(9)).to.be.false;\n    });\n  });\n  describe('Rook Movement', () => {\n    it('should only allow prime-numbered moves for all rooks', () => {\n      // Test both friendly and enemy rooks\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n\n      // Friendly rook (white)\n      testBoard[3][3] = {\n        type: 'rook',\n        color: 'white',\n        hasMoved: false\n      };\n      const friendlyMoves = generateRookMoves(testBoard, {\n        row: 3,\n        col: 3\n      }, testBoard[3][3]);\n\n      // Enemy rook (black)\n      testBoard[4][4] = {\n        type: 'rook',\n        color: 'black',\n        hasMoved: false\n      };\n      const enemyMoves = generateRookMoves(testBoard, {\n        row: 4,\n        col: 4\n      }, testBoard[4][4]);\n      const allowedDistances = new Set([2, 3, 5, 7]);\n\n      // Verify both rooks follow prime movement rules\n      [...friendlyMoves, ...enemyMoves].forEach(move => {\n        const dx = Math.abs(move.to.col - move.from.col);\n        const dy = Math.abs(move.to.row - move.from.row);\n        const distance = dx + dy; // Since rook moves straight\n        expect(allowedDistances.has(distance)).to.be.true;\n      });\n    });\n  });\n  describe('Pawn Movement', () => {\n    let testBoard;\n    beforeEach(() => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      enPassantTarget = null; // Reset enPassant target\n    });\n\n    // it('should detect en passant opportunities', () => {\n    //   // Set up pawns\n    //   testBoard[3][3] = { type: 'pawn', color: 'white', hasMoved: true };\n    //   testBoard[3][4] = { type: 'pawn', color: 'black', hasMoved: true };\n\n    //   // Simulate the double-step pawn move that creates en passant opportunity\n    //   const move = {\n    //     from: { row: 1, col: 4 },\n    //     to: { row: 3, col: 4 },\n    //     piece: testBoard[3][4],\n    //     color: 'black'\n    //   };\n\n    //   // Update enPassantTarget as the game would\n    //   enPassantTarget = { row: 2, col: 4 };\n\n    //   // Get white pawn's moves\n    //   const whitePawnMoves = generatePawnMoves(testBoard, { row: 3, col: 3 }, testBoard[3][3]);\n\n    //   // Verify en passant move exists diagonally\n    //   expect(whitePawnMoves).to.deep.include({\n    //     from: { row: 3, col: 3 },\n    //     to: { row: 2, col: 4 },\n    //     piece: testBoard[3][3],\n    //     enPassant: true\n    //   });\n    // });\n\n    it('should trigger promotion on last rank', () => {\n      const pawn = {\n        type: 'pawn',\n        color: 'white',\n        hasMoved: true\n      };\n      testBoard[1][0] = pawn;\n      const moves = generatePawnMoves(testBoard, {\n        row: 1,\n        col: 0\n      }, pawn);\n      expect(moves.some(m => m.to.row === 0)).to.be.true;\n    });\n  });\n  describe('Check Detection', () => {\n    let testBoard;\n    beforeEach(() => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n    });\n    it('should identify attacked squares', () => {\n      // Place black rook in same column as white king\n      testBoard[0][4] = createPiece('rook', 'black'); // Top of column 4\n      testBoard[4][4] = createPiece('king', 'white'); // Center king\n\n      expect(isSquareAttacked(testBoard, {\n        row: 4,\n        col: 4\n      }, 'black')).to.be.true;\n    });\n    it('should detect checkmate state', () => {\n      // Proper checkmate setup\n      testBoard[7][4] = createPiece('king', 'white'); // White king in corner\n      testBoard[6][3] = createPiece('queen', 'black'); // Queen attacking diagonally\n      testBoard[7][5] = createPiece('rook', 'black'); // Rook blocking escape\n\n      // Verify no legal moves\n      expect(checkForCheckmate(testBoard, 'white')).to.be.true;\n    });\n  });\n  describe('Castling', () => {\n    beforeEach(() => {\n      // Create fresh board with only necessary pieces\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n\n      // Set up castling scenario\n      testBoard[7][4] = createPiece('king', 'white'); // White king\n      testBoard[7][7] = createPiece('rook', 'white'); // Kingside rook\n    });\n    it('should allow kingside castling when valid', () => {\n      testBoard[7][5] = null;\n      testBoard[7][6] = null;\n      const king = testBoard[7][4]; // Don't forget to define king\n\n      expect(canCastle(testBoard, king, {\n        side: 'kingside',\n        pos: {\n          row: 7,\n          col: 4\n        }\n      })).to.be.true;\n    });\n    it('should prevent castling through attacked squares', () => {\n      testBoard[7][5] = null;\n      testBoard[7][6] = null;\n      testBoard[6][5] = {\n        type: 'bishop',\n        color: 'black',\n        hasMoved: true\n      };\n      const king = testBoard[7][4]; // Don't forget to define king\n\n      expect(canCastle(testBoard, king, {\n        side: 'kingside',\n        pos: {\n          row: 7,\n          col: 4\n        }\n      })).to.be.false;\n    });\n  });\n  describe('Board State Management', () => {\n    // it('should clone board correctly', () => {\n    //   const cloned = cloneBoard(testBoard);\n    //   cloned[0][0].hasMoved = true;\n    //   expect(testBoard[0][0].hasMoved).to.be.false;\n    // });\n\n    // it('should serialize board state', () => {\n    //   const serialized = serializeBoard(testBoard);\n    //   expect(serialized).to.include('rw|bw'); // Rook white and bishop white\n    // });\n  });\n  describe('Helper Functions', () => {\n    it('should identify opponent color', () => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      expect(getOpponent('white')).to.equal('black');\n      expect(getOpponent('black')).to.equal('white');\n    });\n    it('should validate board boundaries', () => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      expect(isInBounds(7, 7)).to.be.true;\n      expect(isInBounds(-1, 3)).to.be.false;\n      expect(isInBounds(4, 8)).to.be.false;\n    });\n\n    // it('should generate all legal moves', () => {\n    //   testBoard = Array(8).fill().map(() => Array(8).fill(null));\n    //   const initialMoves = generateMovesForPiece(testBoard, { row: 6, col: 0 }, testBoard[6][0]);\n    //   expect(initialMoves).to.have.lengthOf(2); // Initial pawn move\n    // });\n  });\n  describe('Special Moves', () => {\n    let testBoard;\n    beforeEach(() => {\n      // Create fresh board with proper castling setup\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      testBoard[7][4] = {\n        type: 'king',\n        color: 'white',\n        hasMoved: false // Crucial for castling\n      };\n      testBoard[7][7] = {\n        type: 'rook',\n        color: 'white',\n        hasMoved: false // Crucial for castling\n      };\n      // Clear the castling path\n      testBoard[7][5] = null;\n      testBoard[7][6] = null;\n    });\n    it('should detect en passant moves', () => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      const move = {\n        piece: {\n          type: 'pawn',\n          color: 'black'\n        },\n        from: {\n          row: 1,\n          col: 3\n        },\n        to: {\n          row: 3,\n          col: 3\n        }\n      };\n      expect(isEnPassantMove(move)).to.be.false; // Should only be true in specific context\n    });\n\n    //   it('should execute castling correctly', () => {\n    //   const king = testBoard[7][4];\n    //   const castleMove = {\n    //     from: { row: 7, col: 4 },\n    //     to: { row: 7, col: 6 },\n    //     piece: king,\n    //     castle: 'kingside'\n    //   };\n\n    //   performCastle(castleMove);\n\n    //   // Verify king moved\n    //   expect(testBoard[7][6]).to.deep.equal({\n    //     type: 'king',\n    //     color: 'white',\n    //     hasMoved: true\n    //   });\n\n    //   // Verify rook moved\n    //   expect(testBoard[7][5]).to.deep.equal({\n    //     type: 'rook',\n    //     color: 'white',\n    //     hasMoved: true\n    //   });\n\n    //   // Verify original positions are empty\n    //   expect(testBoard[7][4]).to.be.null;\n    //   expect(testBoard[7][7]).to.be.null;\n    // });\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["expect","require","isPrime","generateRookMoves","generatePawnMoves","isLegalMove","initializeBoard","checkForCheckmate","isSquareAttacked","serializeBoard","cloneBoard","getOpponent","isInBounds","isKingSafe","performCastle","canCastle","isEnPassantMove","generateMovesForPiece","createPiece","enPassantTarget","describe","testBoard","before","Array","fill","map","beforeEach","it","to","be","true","false","type","color","hasMoved","friendlyMoves","row","col","enemyMoves","allowedDistances","Set","forEach","move","dx","Math","abs","from","dy","distance","has","pawn","moves","some","m","king","side","pos","equal","piece"],"sourceRoot":"/home/bayern/Chess_Temp/test/","sources":["game.test.js"],"sourcesContent":["const { expect } = require('chai');\nlet {\n  isPrime,\n  generateRookMoves,\n  generatePawnMoves,\n  isLegalMove,\n  initializeBoard,\n  checkForCheckmate,\n  isSquareAttacked,\n  serializeBoard,\n  cloneBoard,\n  getOpponent,\n  isInBounds,\n  isKingSafe,\n  performCastle,\n  canCastle,\n  isEnPassantMove,\n  generateMovesForPiece,\n  createPiece,\n  enPassantTarget\n} = require('../gameController');\n\ndescribe('Chess Game Tests', () => {\n  let testBoard;\n\n  before(() => {\n    // Create a fresh board with just the pieces we need for testing\n    testBoard = Array(8).fill().map(() => Array(8).fill(null));\n  });\n\n  beforeEach(() => {\n    testBoard = initializeBoard();\n  });\n\n  describe('Prime Number Validation', () => {\n    it('should identify prime numbers correctly', () => {\n      expect(isPrime(2)).to.be.true;\n      expect(isPrime(7)).to.be.true;\n      expect(isPrime(1)).to.be.false;\n      expect(isPrime(4)).to.be.false;\n      expect(isPrime(9)).to.be.false;\n    });\n  });\n\n  describe('Rook Movement', () => {\n    it('should only allow prime-numbered moves for all rooks', () => {\n      // Test both friendly and enemy rooks\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      \n      // Friendly rook (white)\n      testBoard[3][3] = { type: 'rook', color: 'white', hasMoved: false };\n      const friendlyMoves = generateRookMoves(testBoard, { row: 3, col: 3 }, testBoard[3][3]);\n      \n      // Enemy rook (black)\n      testBoard[4][4] = { type: 'rook', color: 'black', hasMoved: false };\n      const enemyMoves = generateRookMoves(testBoard, { row: 4, col: 4 }, testBoard[4][4]);\n      \n      const allowedDistances = new Set([2, 3, 5, 7]);\n      \n      // Verify both rooks follow prime movement rules\n      [...friendlyMoves, ...enemyMoves].forEach(move => {\n        const dx = Math.abs(move.to.col - move.from.col);\n        const dy = Math.abs(move.to.row - move.from.row);\n        const distance = dx + dy; // Since rook moves straight\n        expect(allowedDistances.has(distance)).to.be.true;\n      });\n    });\n  });\n\n  describe('Pawn Movement', () => {\n    let testBoard;\n  \n    beforeEach(() => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      enPassantTarget = null; // Reset enPassant target\n    });\n  \n    // it('should detect en passant opportunities', () => {\n    //   // Set up pawns\n    //   testBoard[3][3] = { type: 'pawn', color: 'white', hasMoved: true };\n    //   testBoard[3][4] = { type: 'pawn', color: 'black', hasMoved: true };\n  \n    //   // Simulate the double-step pawn move that creates en passant opportunity\n    //   const move = {\n    //     from: { row: 1, col: 4 },\n    //     to: { row: 3, col: 4 },\n    //     piece: testBoard[3][4],\n    //     color: 'black'\n    //   };\n      \n    //   // Update enPassantTarget as the game would\n    //   enPassantTarget = { row: 2, col: 4 };\n  \n    //   // Get white pawn's moves\n    //   const whitePawnMoves = generatePawnMoves(testBoard, { row: 3, col: 3 }, testBoard[3][3]);\n      \n    //   // Verify en passant move exists diagonally\n    //   expect(whitePawnMoves).to.deep.include({\n    //     from: { row: 3, col: 3 },\n    //     to: { row: 2, col: 4 },\n    //     piece: testBoard[3][3],\n    //     enPassant: true\n    //   });\n    // });\n  \n    it('should trigger promotion on last rank', () => {\n      const pawn = { type: 'pawn', color: 'white', hasMoved: true };\n      testBoard[1][0] = pawn;\n      \n      const moves = generatePawnMoves(testBoard, { row: 1, col: 0 }, pawn);\n      expect(moves.some(m => m.to.row === 0)).to.be.true;\n    });\n  });\n\n  describe('Check Detection', () => {\n    let testBoard;\n  \n    beforeEach(() => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n    });\n  \n    it('should identify attacked squares', () => {\n      // Place black rook in same column as white king\n      testBoard[0][4] = createPiece('rook', 'black'); // Top of column 4\n      testBoard[4][4] = createPiece('king', 'white'); // Center king\n      \n      expect(isSquareAttacked(testBoard, { row: 4, col: 4 }, 'black')).to.be.true;\n    });\n  \n    it('should detect checkmate state', () => {\n      // Proper checkmate setup\n      testBoard[7][4] = createPiece('king', 'white'); // White king in corner\n      testBoard[6][3] = createPiece('queen', 'black'); // Queen attacking diagonally\n      testBoard[7][5] = createPiece('rook', 'black'); // Rook blocking escape\n      \n      // Verify no legal moves\n      expect(checkForCheckmate(testBoard, 'white')).to.be.true;\n    });\n  });\n\n  describe('Castling', () => {\n    beforeEach(() => {\n      // Create fresh board with only necessary pieces\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      \n      // Set up castling scenario\n      testBoard[7][4] = createPiece('king', 'white');  // White king\n      testBoard[7][7] = createPiece('rook', 'white');  // Kingside rook\n    });\n\n    it('should allow kingside castling when valid', () => {\n      testBoard[7][5] = null;\n      testBoard[7][6] = null;\n      const king = testBoard[7][4]; // Don't forget to define king\n      \n      expect(canCastle(testBoard, king, { side: 'kingside', pos: { row: 7, col: 4 }})).to.be.true;\n    });\n\n    it('should prevent castling through attacked squares', () => {\n      testBoard[7][5] = null;\n      testBoard[7][6] = null;\n      testBoard[6][5] = { type: 'bishop', color: 'black', hasMoved: true };\n      const king = testBoard[7][4]; // Don't forget to define king\n      \n      expect(canCastle(testBoard, king, { side: 'kingside', pos: { row: 7, col: 4 }})).to.be.false;\n    });\n  });\n\n  describe('Board State Management', () => {\n    // it('should clone board correctly', () => {\n    //   const cloned = cloneBoard(testBoard);\n    //   cloned[0][0].hasMoved = true;\n    //   expect(testBoard[0][0].hasMoved).to.be.false;\n    // });\n\n    // it('should serialize board state', () => {\n    //   const serialized = serializeBoard(testBoard);\n    //   expect(serialized).to.include('rw|bw'); // Rook white and bishop white\n    // });\n  });\n\n  describe('Helper Functions', () => {\n    it('should identify opponent color', () => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      expect(getOpponent('white')).to.equal('black');\n      expect(getOpponent('black')).to.equal('white');\n    });\n\n    it('should validate board boundaries', () => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      expect(isInBounds(7, 7)).to.be.true;\n      expect(isInBounds(-1, 3)).to.be.false;\n      expect(isInBounds(4, 8)).to.be.false;\n    });\n\n    // it('should generate all legal moves', () => {\n    //   testBoard = Array(8).fill().map(() => Array(8).fill(null));\n    //   const initialMoves = generateMovesForPiece(testBoard, { row: 6, col: 0 }, testBoard[6][0]);\n    //   expect(initialMoves).to.have.lengthOf(2); // Initial pawn move\n    // });\n  });\n\n  describe('Special Moves', () => {\n    let testBoard;\n\n    beforeEach(() => {\n      // Create fresh board with proper castling setup\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      testBoard[7][4] = { \n        type: 'king', \n        color: 'white', \n        hasMoved: false  // Crucial for castling\n      };\n      testBoard[7][7] = { \n        type: 'rook', \n        color: 'white', \n        hasMoved: false  // Crucial for castling\n      };\n      // Clear the castling path\n      testBoard[7][5] = null;\n      testBoard[7][6] = null;\n    });\n\n    it('should detect en passant moves', () => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      const move = {\n        piece: { type: 'pawn', color: 'black' },\n        from: { row: 1, col: 3 },\n        to: { row: 3, col: 3 }\n      };\n      expect(isEnPassantMove(move)).to.be.false; // Should only be true in specific context\n    });\n\n  //   it('should execute castling correctly', () => {\n  //   const king = testBoard[7][4];\n  //   const castleMove = {\n  //     from: { row: 7, col: 4 },\n  //     to: { row: 7, col: 6 },\n  //     piece: king,\n  //     castle: 'kingside'\n  //   };\n\n  //   performCastle(castleMove);\n\n  //   // Verify king moved\n  //   expect(testBoard[7][6]).to.deep.equal({\n  //     type: 'king',\n  //     color: 'white',\n  //     hasMoved: true\n  //   });\n    \n  //   // Verify rook moved\n  //   expect(testBoard[7][5]).to.deep.equal({\n  //     type: 'rook',\n  //     color: 'white',\n  //     hasMoved: true\n  //   });\n    \n  //   // Verify original positions are empty\n  //   expect(testBoard[7][4]).to.be.null;\n  //   expect(testBoard[7][7]).to.be.null;\n  // });\n});\n});"],"mappings":"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","ignoreList":[]}},"mtime":1743349739795},"{\"assumptions\":{},\"sourceRoot\":\"/home/bayern/Chess_Temp/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/bayern/Chess_Temp\",\"filename\":\"/home/bayern/Chess_Temp/gameController.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/bayern/Chess_Temp\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-duplicate-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regexp-modifiers\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$3\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$4\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$5\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$6\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$7\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$8\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$9\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$10\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$11\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$12\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$16\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$17\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.26.10:development":{"value":{"code":"\"use strict\";\n\n/* \n  Modified Chess Game with Prime Rook Moves, Menu, Chess Clock, and Advanced Rules:\n  - Friendly rooks can only move a prime number of squares (allowed: 2, 3, 5, or 7).\n  - Queen moves remain standard.\n  - All other rules (castling, en passant, pawn promotion, etc.) remain unchanged.\n*/\n\n/* ----- DOM ELEMENTS ----- */\nconst boardElement = document.getElementById(\"chessboard\");\nconst promotionModal = document.getElementById(\"promotionModal\");\nconst promotionChoices = document.querySelectorAll(\".promotionChoice\");\nconst startGameBtn = document.getElementById(\"startGame\");\nconst gameModeSelect = document.getElementById(\"gameMode\");\nconst whiteClockEl = document.getElementById(\"whiteClock\");\nconst blackClockEl = document.getElementById(\"blackClock\");\nconst menuScreen = document.getElementById(\"menuScreen\");\nconst gameScreen = document.getElementById(\"gameScreen\");\n\n/* ----- GAME STATE VARIABLES ----- */\nlet board = [];\nlet currentPlayer = \"white\";\nlet selectedPiece = null;\nlet selectedPos = null;\nlet moveHistory = [];\nlet boardHistory = [];\nlet fiftyMoveCounter = 0;\nlet enPassantTarget = null;\n\n/* ----- CLOCK VARIABLES ----- */\nlet whiteTime = 0;\nlet blackTime = 0;\nlet clockInterval = null;\n\n/* ----- DRAGGING STATE ----- */\nlet draggingPieceEl = null;\nlet dragOffset = {\n  x: 0,\n  y: 0\n};\nlet dragStartPos = null;\n\n/* ----- HELPER: Check if number is prime ----- */\nfunction isPrime(n) {\n  if (n < 2) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\n/* ----- CLOCK FUNCTIONS ----- */\nfunction startClock() {\n  clearInterval(clockInterval);\n  clockInterval = setInterval(() => {\n    if (currentPlayer === \"white\") {\n      whiteTime--;\n      if (whiteTime <= 0) {\n        clearInterval(clockInterval);\n        alert(\"Time's up! Black wins!\");\n        resetGame();\n        return;\n      }\n    } else {\n      blackTime--;\n      if (blackTime <= 0) {\n        clearInterval(clockInterval);\n        alert(\"Time's up! White wins!\");\n        resetGame();\n        return;\n      }\n    }\n    updateClockDisplay();\n  }, 1000);\n}\nfunction updateClockDisplay() {\n  whiteClockEl.innerText = formatTime(whiteTime);\n  blackClockEl.innerText = formatTime(blackTime);\n}\nfunction formatTime(seconds) {\n  let m = Math.floor(seconds / 60);\n  let s = seconds % 60;\n  return (m < 10 ? \"0\" + m : m) + \":\" + (s < 10 ? \"0\" + s : s);\n}\n\n/* ----- MENU AND GAME START ----- */\nstartGameBtn.addEventListener(\"click\", () => {\n  let initialTime = parseInt(gameModeSelect.value);\n  whiteTime = initialTime;\n  blackTime = initialTime;\n  updateClockDisplay();\n  menuScreen.style.display = \"none\";\n  gameScreen.style.display = \"block\";\n  initializeBoard();\n  startClock();\n});\n\n/* ----- INITIALIZATION ----- */\nfunction initializeBoard() {\n  board = Array(8).fill(null).map(() => Array(8).fill(null));\n  for (let i = 0; i < 8; i++) {\n    board[1][i] = createPiece(\"pawn\", \"black\");\n    board[6][i] = createPiece(\"pawn\", \"white\");\n  }\n  board[0][0] = createPiece(\"rook\", \"black\");\n  board[0][7] = createPiece(\"rook\", \"black\");\n  board[7][0] = createPiece(\"rook\", \"white\");\n  board[7][7] = createPiece(\"rook\", \"white\");\n  board[0][1] = createPiece(\"knight\", \"black\");\n  board[0][6] = createPiece(\"knight\", \"black\");\n  board[7][1] = createPiece(\"knight\", \"white\");\n  board[7][6] = createPiece(\"knight\", \"white\");\n  board[0][2] = createPiece(\"bishop\", \"black\");\n  board[0][5] = createPiece(\"bishop\", \"black\");\n  board[7][2] = createPiece(\"bishop\", \"white\");\n  board[7][5] = createPiece(\"bishop\", \"white\");\n  board[0][3] = createPiece(\"queen\", \"black\");\n  board[7][3] = createPiece(\"queen\", \"white\");\n  board[0][4] = createPiece(\"king\", \"black\");\n  board[7][4] = createPiece(\"king\", \"white\");\n  moveHistory = [];\n  boardHistory = [];\n  fiftyMoveCounter = 0;\n  enPassantTarget = null;\n  selectedPiece = null;\n  selectedPos = null;\n  currentPlayer = \"white\";\n  drawBoard();\n  updateBoardHistory();\n}\nfunction resetGame() {\n  clearInterval(clockInterval);\n  menuScreen.style.display = \"block\";\n  gameScreen.style.display = \"none\";\n  initializeBoard();\n}\n\n/* ----- PIECE CREATION ----- */\nfunction createPiece(type, color) {\n  return {\n    type,\n    color,\n    hasMoved: false\n  };\n}\n\n/* ----- DRAWING THE BOARD ----- */\nfunction drawBoard() {\n  boardElement.innerHTML = \"\";\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      let square = document.createElement(\"div\");\n      square.classList.add(\"square\");\n      square.dataset.row = row;\n      square.dataset.col = col;\n      square.classList.add((row + col) % 2 === 0 ? \"light\" : \"dark\");\n      if (selectedPos && selectedPos.row === row && selectedPos.col === col) {\n        square.classList.add(\"selected\");\n      }\n      if (board[row][col] && board[row][col].type === \"king\") {\n        if (isSquareAttacked(board, {\n          row,\n          col\n        }, getOpponent(board[row][col].color))) {\n          square.classList.add(\"in-check\");\n        }\n      }\n      if (board[row][col]) {\n        let pieceEl = document.createElement(\"img\");\n        pieceEl.classList.add(\"piece-img\", board[row][col].color, board[row][col].type);\n        pieceEl.src = getPieceImageSrc(board[row][col]);\n        pieceEl.alt = board[row][col].type;\n        pieceEl.addEventListener(\"mousedown\", onPieceMouseDown);\n        square.appendChild(pieceEl);\n      }\n      square.addEventListener(\"click\", onSquareClick);\n      boardElement.appendChild(square);\n    }\n  }\n}\nfunction getPieceImageSrc(piece) {\n  return `assets/${piece.color}_${piece.type}.png`;\n}\n\n/* ----- CLICK HANDLING ----- */\nfunction onSquareClick(e) {\n  if (draggingPieceEl) return;\n  const row = parseInt(e.currentTarget.dataset.row);\n  const col = parseInt(e.currentTarget.dataset.col);\n  if (board[row][col] && board[row][col].color === currentPlayer) {\n    selectedPiece = board[row][col];\n    selectedPos = {\n      row,\n      col\n    };\n  } else if (selectedPiece) {\n    let move = {\n      from: {\n        row: selectedPos.row,\n        col: selectedPos.col\n      },\n      to: {\n        row,\n        col\n      },\n      piece: selectedPiece\n    };\n    if (isLegalMove(board, move, currentPlayer)) {\n      makeMove(move);\n    } else {\n      console.log(\"Illegal move attempted:\", move);\n    }\n    selectedPiece = null;\n    selectedPos = null;\n  }\n  drawBoard();\n}\n\n/* ----- DRAG-TO-MOVE HANDLING ----- */\nfunction onPieceMouseDown(e) {\n  const square = e.target.parentElement;\n  const row = parseInt(square.dataset.row);\n  const col = parseInt(square.dataset.col);\n  if (board[row][col].color !== currentPlayer) return;\n  selectedPiece = board[row][col];\n  selectedPos = {\n    row,\n    col\n  };\n  dragStartPos = {\n    row,\n    col\n  };\n  draggingPieceEl = e.target.cloneNode(true);\n  draggingPieceEl.classList.add(\"dragging\");\n  document.body.appendChild(draggingPieceEl);\n  const rect = e.target.getBoundingClientRect();\n  dragOffset.x = e.clientX - rect.left;\n  dragOffset.y = e.clientY - rect.top;\n  drawBoard();\n  document.addEventListener(\"mousemove\", onMouseMove);\n  document.addEventListener(\"mouseup\", onMouseUp);\n}\nfunction onMouseMove(e) {\n  if (draggingPieceEl) {\n    draggingPieceEl.style.left = e.clientX - dragOffset.x + \"px\";\n    draggingPieceEl.style.top = e.clientY - dragOffset.y + \"px\";\n  }\n}\nfunction onMouseUp(e) {\n  if (!draggingPieceEl) return;\n  const boardRect = boardElement.getBoundingClientRect();\n  const x = e.clientX - boardRect.left;\n  const y = e.clientY - boardRect.top;\n  const col = Math.floor(x / 80);\n  const row = Math.floor(y / 80);\n  if (row >= 0 && row < 8 && col >= 0 && col < 8) {\n    let move = {\n      from: {\n        row: dragStartPos.row,\n        col: dragStartPos.col\n      },\n      to: {\n        row,\n        col\n      },\n      piece: selectedPiece\n    };\n    // Detect castling: if king moves two squares horizontally\n    if (move.piece.type === \"king\" && Math.abs(move.to.col - move.from.col) === 2) {\n      move.castle = move.to.col > move.from.col ? \"kingside\" : \"queenside\";\n    }\n    if (isLegalMove(board, move, currentPlayer)) {\n      makeMove(move);\n    } else {\n      console.log(\"Illegal move attempted via drag:\", move);\n    }\n  }\n  document.body.removeChild(draggingPieceEl);\n  draggingPieceEl = null;\n  dragStartPos = null;\n  selectedPiece = null;\n  selectedPos = null;\n  document.removeEventListener(\"mousemove\", onMouseMove);\n  document.removeEventListener(\"mouseup\", onMouseUp);\n  drawBoard();\n}\n\n/* ----- MAKING MOVES ----- */\nfunction makeMove(move) {\n  if (isCastlingMove(move)) {\n    performCastle(move);\n  } else if (isEnPassantMove(move)) {\n    performEnPassant(move);\n  } else {\n    board[move.to.row][move.to.col] = move.piece;\n    board[move.from.row][move.from.col] = null;\n    if (move.piece.type === \"pawn\" && isLastRank(move.to, move.piece.color)) {\n      showPromotionModal(move);\n      return;\n    }\n  }\n  move.piece.hasMoved = true;\n  handlePawnDoubleStep(move);\n  moveHistory.push(move);\n  updateFiftyMoveCounter(move);\n  updateBoardHistory();\n\n  // Switch turn. currentPlayer becomes the player who is about to move.\n  currentPlayer = getOpponent(currentPlayer);\n  startClock();\n\n  // FIXED: Check for checkmate on the current player's turn\n  if (checkForCheckmate(board, currentPlayer)) {\n    alert(\"Checkmate! \" + getOpponent(currentPlayer) + \" wins.\");\n    clearInterval(clockInterval);\n    resetGame();\n    return;\n  } else if (checkForStalemate(board, currentPlayer)) {\n    alert(\"Stalemate!\");\n    clearInterval(clockInterval);\n    resetGame();\n    return;\n  } else if (isThreefoldRepetition()) {\n    alert(\"Draw by threefold repetition!\");\n    clearInterval(clockInterval);\n    resetGame();\n    return;\n  } else if (isFiftyMoveRule()) {\n    alert(\"Draw by fifty-move rule!\");\n    clearInterval(clockInterval);\n    resetGame();\n    return;\n  }\n  selectedPiece = null;\n  selectedPos = null;\n  drawBoard();\n}\n\n/* ----- MOVE GENERATION ----- */\nfunction generateMovesForPiece(board, pos) {\n  let piece = board[pos.row][pos.col];\n  if (!piece) return [];\n  let moves = [];\n  switch (piece.type) {\n    case \"pawn\":\n      moves = generatePawnMoves(board, pos, piece);\n      break;\n    case \"rook\":\n      // Friendly rooks: restrict moves to prime number of squares.\n      moves = generateRookMoves(board, pos, piece);\n      break;\n    case \"knight\":\n      moves = generateKnightMoves(board, pos, piece);\n      break;\n    case \"bishop\":\n      moves = generateBishopMoves(board, pos, piece);\n      break;\n    case \"queen\":\n      // For queen, use default rook moves (no prime restriction) plus bishop moves.\n      moves = generateRookMovesDefault(board, pos, piece).concat(generateBishopMoves(board, pos, piece));\n      break;\n    case \"king\":\n      moves = generateKingMoves(board, pos, piece);\n      moves = moves.concat(generateCastlingMoves(board, pos, piece));\n      break;\n  }\n  return moves;\n}\nfunction generatePawnMoves(board, pos, piece) {\n  let moves = [];\n  let direction = piece.color === \"white\" ? -1 : 1;\n  let startRow = piece.color === \"white\" ? 6 : 1;\n  let nextRow = pos.row + direction;\n  if (isInBounds(nextRow, pos.col) && board[nextRow][pos.col] === null) {\n    moves.push({\n      from: pos,\n      to: {\n        row: nextRow,\n        col: pos.col\n      },\n      piece\n    });\n    if (pos.row === startRow && isInBounds(nextRow + direction, pos.col) && board[nextRow + direction][pos.col] === null) {\n      moves.push({\n        from: pos,\n        to: {\n          row: nextRow + direction,\n          col: pos.col\n        },\n        piece\n      });\n    }\n  }\n  for (let dc of [-1, 1]) {\n    let newCol = pos.col + dc;\n    if (isInBounds(nextRow, newCol)) {\n      if (board[nextRow][newCol] && board[nextRow][newCol].color !== piece.color) {\n        moves.push({\n          from: pos,\n          to: {\n            row: nextRow,\n            col: newCol\n          },\n          piece\n        });\n      }\n      if (board[nextRow][newCol] === null && enPassantTarget && enPassantTarget.row === nextRow && enPassantTarget.col === newCol) {\n        moves.push({\n          from: pos,\n          to: {\n            row: nextRow,\n            col: newCol\n          },\n          piece,\n          enPassant: true\n        });\n      }\n    }\n  }\n  return moves;\n}\n\n/* Modified Rook Moves: For friendly rooks, allow moves only if the number of squares moved is prime (2, 3, 5, or 7) */\nfunction generateRookMoves(board, pos, piece) {\n  let moves = [];\n  let directions = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n  directions.forEach(d => {\n    let r = pos.row;\n    let c = pos.col;\n    let steps = 0;\n    while (true) {\n      r += d[0];\n      c += d[1];\n      steps++;\n      if (!isInBounds(r, c)) break;\n      if (isPrime(steps)) {\n        if (board[r][c] === null) {\n          moves.push({\n            from: pos,\n            to: {\n              row: r,\n              col: c\n            },\n            piece\n          });\n        } else {\n          if (board[r][c].color !== piece.color) {\n            moves.push({\n              from: pos,\n              to: {\n                row: r,\n                col: c\n              },\n              piece\n            });\n          }\n          break;\n        }\n      } else {\n        if (board[r][c] !== null) break;\n      }\n    }\n  });\n  return moves;\n}\n\n/* Default Rook Moves for queen moves and enemy attack detection (no prime restriction) */\nfunction generateRookMovesDefault(board, pos, piece) {\n  let moves = [];\n  let directions = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n  directions.forEach(d => {\n    let r = pos.row;\n    let c = pos.col;\n    while (true) {\n      r += d[0];\n      c += d[1];\n      if (!isInBounds(r, c)) break;\n      if (board[r][c] === null) {\n        moves.push({\n          from: pos,\n          to: {\n            row: r,\n            col: c\n          },\n          piece\n        });\n      } else {\n        moves.push({\n          from: pos,\n          to: {\n            row: r,\n            col: c\n          },\n          piece\n        });\n        break;\n      }\n    }\n  });\n  return moves;\n}\nfunction generateKnightMoves(board, pos, piece) {\n  let moves = [];\n  let offsets = [[-2, -1], [-2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2], [2, -1], [2, 1]];\n  offsets.forEach(o => {\n    let r = pos.row + o[0];\n    let c = pos.col + o[1];\n    if (isInBounds(r, c) && (!board[r][c] || board[r][c].color !== piece.color)) {\n      moves.push({\n        from: pos,\n        to: {\n          row: r,\n          col: c\n        },\n        piece\n      });\n    }\n  });\n  return moves;\n}\nfunction generateBishopMoves(board, pos, piece) {\n  let moves = [];\n  let directions = [[1, 1], [1, -1], [-1, 1], [-1, -1]];\n  directions.forEach(d => {\n    for (let steps = 1; steps < 8; steps++) {\n      let r = pos.row + d[0] * steps;\n      let c = pos.col + d[1] * steps;\n      if (!isInBounds(r, c)) break;\n\n      // Skip if destination is occupied by a friendly piece\n      let destSquare = board[r][c];\n      if (destSquare && destSquare.color === piece.color) continue;\n      let standardPathValid = true;\n      let modifiedPawnCount = 0;\n      let modifiedPathValid = true;\n\n      // Check standard path validity (all intermediate squares empty)\n      for (let s = 1; s < steps; s++) {\n        let currentR = pos.row + d[0] * s;\n        let currentC = pos.col + d[1] * s;\n        if (board[currentR][currentC] !== null) {\n          standardPathValid = false;\n          break;\n        }\n      }\n\n      // Check modified path validity (exactly one pawn in intermediate squares)\n      for (let s = 1; s < steps; s++) {\n        let currentR = pos.row + d[0] * s;\n        let currentC = pos.col + d[1] * s;\n        let square = board[currentR][currentC];\n        if (square) {\n          if (square.type === 'pawn') {\n            modifiedPawnCount++;\n            if (modifiedPawnCount > 1) {\n              modifiedPathValid = false;\n              break;\n            }\n          } else {\n            modifiedPathValid = false;\n            break;\n          }\n        }\n      }\n      modifiedPathValid = modifiedPathValid && modifiedPawnCount === 1;\n\n      // Add move if either path is valid\n      if (standardPathValid || modifiedPathValid) {\n        moves.push({\n          from: pos,\n          to: {\n            row: r,\n            col: c\n          },\n          piece\n        });\n      }\n    }\n  });\n  return moves;\n}\nfunction generateQueenMoves(board, pos, piece) {\n  // Queen moves = default rook moves (no prime restriction) + bishop moves\n  return generateRookMovesDefault(board, pos, piece).concat(generateBishopMoves(board, pos, piece));\n}\nfunction generateKingMoves(board, pos, piece) {\n  let moves = [];\n  for (let r = pos.row - 1; r <= pos.row + 1; r++) {\n    for (let c = pos.col - 1; c <= pos.col + 1; c++) {\n      if (r === pos.row && c === pos.col) continue;\n      if (isInBounds(r, c) && (!board[r][c] || board[r][c].color !== piece.color)) {\n        moves.push({\n          from: pos,\n          to: {\n            row: r,\n            col: c\n          },\n          piece\n        });\n      }\n    }\n  }\n  return moves;\n}\nfunction generateCastlingMoves(board, pos, king) {\n  let moves = [];\n  if (king.hasMoved) return moves;\n  if (canCastle(board, king, {\n    side: \"kingside\",\n    pos\n  })) {\n    moves.push({\n      from: pos,\n      to: {\n        row: pos.row,\n        col: pos.col + 2\n      },\n      piece: king,\n      castle: \"kingside\"\n    });\n  }\n  if (canCastle(board, king, {\n    side: \"queenside\",\n    pos\n  })) {\n    moves.push({\n      from: pos,\n      to: {\n        row: pos.row,\n        col: pos.col - 2\n      },\n      piece: king,\n      castle: \"queenside\"\n    });\n  }\n  return moves;\n}\n\n/* ----- CASTLING LOGIC ----- */\nfunction canCastle(board, king, {\n  side,\n  pos\n}) {\n  let row = pos.row;\n  if (king.hasMoved) return false;\n  if (side === \"kingside\") {\n    let rook = board[row][7];\n    if (!rook || rook.type !== \"rook\" || rook.hasMoved) return false;\n    if (board[row][5] !== null || board[row][6] !== null) return false;\n    if (!isSquareSafeForKing(board, {\n      row,\n      col: 4\n    }, king.color) || !isSquareSafeForKing(board, {\n      row,\n      col: 5\n    }, king.color) || !isSquareSafeForKing(board, {\n      row,\n      col: 6\n    }, king.color)) return false;\n    return true;\n  } else if (side === \"queenside\") {\n    let rook = board[row][0];\n    if (!rook || rook.type !== \"rook\" || rook.hasMoved) return false;\n    if (board[row][1] !== null || board[row][2] !== null || board[row][3] !== null) return false;\n    if (!isSquareSafeForKing(board, {\n      row,\n      col: 4\n    }, king.color) || !isSquareSafeForKing(board, {\n      row,\n      col: 3\n    }, king.color) || !isSquareSafeForKing(board, {\n      row,\n      col: 2\n    }, king.color)) return false;\n    return true;\n  }\n  return false;\n}\nfunction isSquareSafeForKing(board, pos, color) {\n  let tempBoard = cloneBoard(board);\n  tempBoard[pos.row][pos.col] = {\n    type: \"king\",\n    color,\n    hasMoved: true\n  };\n  return isKingSafe(tempBoard, color);\n}\n\n/* ----- HELPER FUNCTIONS ----- */\nfunction isInBounds(row, col) {\n  return row >= 0 && row < 8 && col >= 0 && col < 8;\n}\nfunction cloneBoard(board) {\n  return board.map(row => row.map(cell => cell ? {\n    ...cell\n  } : null));\n}\nfunction isKingSafe(board, color) {\n  let kingPos = findKing(board, color);\n  if (!kingPos) return false;\n  return !isSquareAttacked(board, kingPos, getOpponent(color));\n}\nfunction findKing(board, color) {\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      let piece = board[r][c];\n      if (piece && piece.type === \"king\" && piece.color === color) {\n        return {\n          row: r,\n          col: c\n        };\n      }\n    }\n  }\n  return null;\n}\nfunction isSquareAttacked(board, pos, attackerColor) {\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      let piece = board[r][c];\n      if (piece && piece.color === attackerColor) {\n        let moves;\n        if (piece.type === \"rook\") {\n          // For enemy rooks, use full-range moves (default) for attack detection.\n          moves = generateRookMovesDefault(board, {\n            row: r,\n            col: c\n          }, piece);\n        } else {\n          moves = generateMovesForPiece(board, {\n            row: r,\n            col: c\n          });\n        }\n        for (let move of moves) {\n          if (move.to.row === pos.row && move.to.col === pos.col) return true;\n        }\n      }\n    }\n  }\n  return false;\n}\nfunction getOpponent(color) {\n  return color === \"white\" ? \"black\" : \"white\";\n}\n\n/* ----- EN PASSANT LOGIC ----- */\nfunction handlePawnDoubleStep(move) {\n  if (move.piece.type === \"pawn\" && Math.abs(move.from.row - move.to.row) === 2) {\n    enPassantTarget = {\n      row: (move.from.row + move.to.row) / 2,\n      col: move.from.col\n    };\n  } else {\n    enPassantTarget = null;\n  }\n}\nfunction isEnPassantMove(move) {\n  return move.piece.type === \"pawn\" && move.from.col !== move.to.col && board[move.to.row][move.to.col] === null;\n}\nfunction performEnPassant(move) {\n  board[move.to.row][move.to.col] = move.piece;\n  board[move.from.row][move.from.col] = null;\n  let captureRow = move.piece.color === \"white\" ? move.to.row + 1 : move.to.row - 1;\n  board[captureRow][move.to.col] = null;\n}\n\n/* ----- CASTLING HANDLING ----- */\nfunction isCastlingMove(move) {\n  return move.piece.type === \"king\" && Math.abs(move.to.col - move.from.col) === 2;\n}\nfunction performCastle(move) {\n  let row = move.from.row;\n  if (move.castle === \"kingside\") {\n    board[row][6] = move.piece;\n    board[row][4] = null;\n    let rook = board[row][7];\n    board[row][5] = rook;\n    board[row][7] = null;\n    rook.hasMoved = true;\n  } else if (move.castle === \"queenside\") {\n    board[row][2] = move.piece;\n    board[row][4] = null;\n    let rook = board[row][0];\n    board[row][3] = rook;\n    board[row][0] = null;\n    rook.hasMoved = true;\n  }\n}\n\n/* ----- PAWN PROMOTION ----- */\nfunction isLastRank(pos, color) {\n  return color === \"white\" && pos.row === 0 || color === \"black\" && pos.row === 7;\n}\nfunction showPromotionModal(move) {\n  promotionModal.style.display = \"block\";\n  promotionModal.dataset.fromRow = move.from.row;\n  promotionModal.dataset.fromCol = move.from.col;\n  promotionModal.dataset.toRow = move.to.row;\n  promotionModal.dataset.toCol = move.to.col;\n  promotionModal.dataset.color = move.piece.color;\n  promotionModal.dataset.pieceType = move.piece.type;\n}\npromotionChoices.forEach(choice => {\n  choice.addEventListener(\"click\", function () {\n    let selectedType = this.dataset.type;\n    let move = {\n      from: {\n        row: parseInt(promotionModal.dataset.fromRow),\n        col: parseInt(promotionModal.dataset.fromCol)\n      },\n      to: {\n        row: parseInt(promotionModal.dataset.toRow),\n        col: parseInt(promotionModal.dataset.toCol)\n      },\n      piece: {\n        type: promotionModal.dataset.pieceType,\n        color: promotionModal.dataset.color\n      }\n    };\n    board[move.to.row][move.to.col] = createPiece(selectedType, move.piece.color);\n    board[move.from.row][move.from.col] = null;\n    promotionModal.style.display = \"none\";\n    board[move.to.row][move.to.col].hasMoved = true;\n    moveHistory.push(move);\n    updateFiftyMoveCounter(move);\n    updateBoardHistory();\n    if (checkForCheckmate(board, getOpponent(currentPlayer))) {\n      alert(\"Checkmate! \" + getOpponent(currentPlayer) + \" wins.\");\n      clearInterval(clockInterval);\n      resetGame();\n      return;\n    } else if (checkForStalemate(board, getOpponent(currentPlayer))) {\n      alert(\"Stalemate!\");\n      clearInterval(clockInterval);\n      resetGame();\n      return;\n    }\n    currentPlayer = getOpponent(currentPlayer);\n    startClock();\n    selectedPiece = null;\n    selectedPos = null;\n    drawBoard();\n  });\n});\n\n/* ----- BOARD HISTORY & DRAWING RULES ----- */\nfunction serializeBoard(board) {\n  return board.map(row => row.map(cell => cell ? cell.type[0] + cell.color[0] : \"  \").join(\"\")).join(\"|\");\n}\nfunction updateBoardHistory() {\n  boardHistory.push(serializeBoard(board));\n}\nfunction isThreefoldRepetition() {\n  let counts = {};\n  boardHistory.forEach(state => {\n    counts[state] = (counts[state] || 0) + 1;\n  });\n  return Object.values(counts).some(count => count >= 3);\n}\nfunction updateFiftyMoveCounter(move) {\n  if (move.piece.type === \"pawn\" || board[move.to.row][move.to.col] !== null) {\n    fiftyMoveCounter = 0;\n  } else {\n    fiftyMoveCounter++;\n  }\n}\nfunction isFiftyMoveRule() {\n  return fiftyMoveCounter >= 50;\n}\n\n/* ----- CHECKMATE & STALEMATE ----- */\n// Checkmate: the current player's king is in check and has no legal moves.\nfunction checkForCheckmate(board, color) {\n  if (!isKingSafe(board, color)) {\n    let moves = generateAllMoves(board, color);\n    let legalMoves = moves.filter(m => isLegalMove(board, m, color));\n    if (legalMoves.length === 0) {\n      console.log(\"Checkmate detected for\", color);\n      return true;\n    }\n  }\n  return false;\n}\nfunction checkForStalemate(board, color) {\n  if (isKingSafe(board, color)) {\n    let moves = generateAllMoves(board, color);\n    let legalMoves = moves.filter(m => isLegalMove(board, m, color));\n    if (legalMoves.length === 0) return true;\n  }\n  return false;\n}\nfunction generateAllMoves(board, color) {\n  let moves = [];\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      let piece = board[r][c];\n      if (piece && piece.color === color) {\n        moves = moves.concat(generateMovesForPiece(board, {\n          row: r,\n          col: c\n        }));\n      }\n    }\n  }\n  return moves;\n}\n\n/* ----- MOVE VALIDATION ----- */\nfunction isLegalMove(board, move, color) {\n  let moves = generateMovesForPiece(board, move.from);\n  let legal = moves.some(m => m.to.row === move.to.row && m.to.col === move.to.col);\n  if (!legal) {\n    console.log(\"Move not in generated moves:\", move);\n    return false;\n  }\n  let newBoard = cloneBoard(board);\n  newBoard[move.to.row][move.to.col] = newBoard[move.from.row][move.from.col];\n  newBoard[move.from.row][move.from.col] = null;\n  let kingPos = findKing(newBoard, color);\n  if (!kingPos) {\n    console.log(\"King not found after move:\", move);\n    return false;\n  }\n  if (!isKingSafe(newBoard, color)) {\n    console.log(\"King would be in check after move:\", move, \"King at:\", kingPos);\n    return false;\n  }\n  return true;\n}\n\n/* ----- END GAME INITIALIZATION ----- */\n// Only initialize if running in browser\nif (typeof process === 'undefined' || !process.env.NODE_ENV === 'test') {\n  initializeBoard();\n}\n\n// Export for Jest testing while maintaining browser compatibility\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = {\n    isPrime,\n    generateRookMoves,\n    generatePawnMoves,\n    isLegalMove,\n    initializeBoard,\n    checkForCheckmate,\n    isSquareAttacked,\n    serializeBoard,\n    cloneBoard,\n    getOpponent,\n    performCastle,\n    canCastle,\n    isEnPassantMove,\n    generateMovesForPiece,\n    isInBounds,\n    isKingSafe,\n    createPiece,\n    enPassantTarget\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["boardElement","document","getElementById","promotionModal","promotionChoices","querySelectorAll","startGameBtn","gameModeSelect","whiteClockEl","blackClockEl","menuScreen","gameScreen","board","currentPlayer","selectedPiece","selectedPos","moveHistory","boardHistory","fiftyMoveCounter","enPassantTarget","whiteTime","blackTime","clockInterval","draggingPieceEl","dragOffset","x","y","dragStartPos","isPrime","n","i","Math","sqrt","startClock","clearInterval","setInterval","alert","resetGame","updateClockDisplay","innerText","formatTime","seconds","m","floor","s","addEventListener","initialTime","parseInt","value","style","display","initializeBoard","Array","fill","map","createPiece","drawBoard","updateBoardHistory","type","color","hasMoved","innerHTML","row","col","square","createElement","classList","add","dataset","isSquareAttacked","getOpponent","pieceEl","src","getPieceImageSrc","alt","onPieceMouseDown","appendChild","onSquareClick","piece","e","currentTarget","move","from","to","isLegalMove","makeMove","console","log","target","parentElement","cloneNode","body","rect","getBoundingClientRect","clientX","left","clientY","top","onMouseMove","onMouseUp","boardRect","abs","castle","removeChild","removeEventListener","isCastlingMove","performCastle","isEnPassantMove","performEnPassant","isLastRank","showPromotionModal","handlePawnDoubleStep","push","updateFiftyMoveCounter","checkForCheckmate","checkForStalemate","isThreefoldRepetition","isFiftyMoveRule","generateMovesForPiece","pos","moves","generatePawnMoves","generateRookMoves","generateKnightMoves","generateBishopMoves","generateRookMovesDefault","concat","generateKingMoves","generateCastlingMoves","direction","startRow","nextRow","isInBounds","dc","newCol","enPassant","directions","forEach","d","r","c","steps","offsets","o","destSquare","standardPathValid","modifiedPawnCount","modifiedPathValid","currentR","currentC","generateQueenMoves","king","canCastle","side","rook","isSquareSafeForKing","tempBoard","cloneBoard","isKingSafe","cell","kingPos","findKing","attackerColor","captureRow","fromRow","fromCol","toRow","toCol","pieceType","choice","selectedType","serializeBoard","join","counts","state","Object","values","some","count","generateAllMoves","legalMoves","filter","length","legal","newBoard","process","env","NODE_ENV","module","exports"],"sourceRoot":"/home/bayern/Chess_Temp/","sources":["gameController.js"],"sourcesContent":["/* \n  Modified Chess Game with Prime Rook Moves, Menu, Chess Clock, and Advanced Rules:\n  - Friendly rooks can only move a prime number of squares (allowed: 2, 3, 5, or 7).\n  - Queen moves remain standard.\n  - All other rules (castling, en passant, pawn promotion, etc.) remain unchanged.\n*/\n\n/* ----- DOM ELEMENTS ----- */\nconst boardElement = document.getElementById(\"chessboard\");\nconst promotionModal = document.getElementById(\"promotionModal\");\nconst promotionChoices = document.querySelectorAll(\".promotionChoice\");\nconst startGameBtn = document.getElementById(\"startGame\");\nconst gameModeSelect = document.getElementById(\"gameMode\");\nconst whiteClockEl = document.getElementById(\"whiteClock\");\nconst blackClockEl = document.getElementById(\"blackClock\");\nconst menuScreen = document.getElementById(\"menuScreen\");\nconst gameScreen = document.getElementById(\"gameScreen\");\n\n/* ----- GAME STATE VARIABLES ----- */\nlet board = [];\nlet currentPlayer = \"white\";\nlet selectedPiece = null;\nlet selectedPos = null;\nlet moveHistory = [];\nlet boardHistory = [];\nlet fiftyMoveCounter = 0;\nlet enPassantTarget = null;\n\n/* ----- CLOCK VARIABLES ----- */\nlet whiteTime = 0;\nlet blackTime = 0;\nlet clockInterval = null;\n\n/* ----- DRAGGING STATE ----- */\nlet draggingPieceEl = null;\nlet dragOffset = { x: 0, y: 0 };\nlet dragStartPos = null;\n\n/* ----- HELPER: Check if number is prime ----- */\nfunction isPrime(n) {\n  if (n < 2) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\n/* ----- CLOCK FUNCTIONS ----- */\nfunction startClock() {\n  clearInterval(clockInterval);\n  clockInterval = setInterval(() => {\n    if (currentPlayer === \"white\") {\n      whiteTime--;\n      if (whiteTime <= 0) {\n        clearInterval(clockInterval);\n        alert(\"Time's up! Black wins!\");\n        resetGame();\n        return;\n      }\n    } else {\n      blackTime--;\n      if (blackTime <= 0) {\n        clearInterval(clockInterval);\n        alert(\"Time's up! White wins!\");\n        resetGame();\n        return;\n      }\n    }\n    updateClockDisplay();\n  }, 1000);\n}\n\nfunction updateClockDisplay() {\n  whiteClockEl.innerText = formatTime(whiteTime);\n  blackClockEl.innerText = formatTime(blackTime);\n}\n\nfunction formatTime(seconds) {\n  let m = Math.floor(seconds / 60);\n  let s = seconds % 60;\n  return (m < 10 ? \"0\" + m : m) + \":\" + (s < 10 ? \"0\" + s : s);\n}\n\n/* ----- MENU AND GAME START ----- */\nstartGameBtn.addEventListener(\"click\", () => {\n  let initialTime = parseInt(gameModeSelect.value);\n  whiteTime = initialTime;\n  blackTime = initialTime;\n  updateClockDisplay();\n  menuScreen.style.display = \"none\";\n  gameScreen.style.display = \"block\";\n  initializeBoard();\n  startClock();\n});\n\n/* ----- INITIALIZATION ----- */\nfunction initializeBoard() {\n  board = Array(8)\n    .fill(null)\n    .map(() => Array(8).fill(null));\n  for (let i = 0; i < 8; i++) {\n    board[1][i] = createPiece(\"pawn\", \"black\");\n    board[6][i] = createPiece(\"pawn\", \"white\");\n  }\n  board[0][0] = createPiece(\"rook\", \"black\");\n  board[0][7] = createPiece(\"rook\", \"black\");\n  board[7][0] = createPiece(\"rook\", \"white\");\n  board[7][7] = createPiece(\"rook\", \"white\");\n  board[0][1] = createPiece(\"knight\", \"black\");\n  board[0][6] = createPiece(\"knight\", \"black\");\n  board[7][1] = createPiece(\"knight\", \"white\");\n  board[7][6] = createPiece(\"knight\", \"white\");\n  board[0][2] = createPiece(\"bishop\", \"black\");\n  board[0][5] = createPiece(\"bishop\", \"black\");\n  board[7][2] = createPiece(\"bishop\", \"white\");\n  board[7][5] = createPiece(\"bishop\", \"white\");\n  board[0][3] = createPiece(\"queen\", \"black\");\n  board[7][3] = createPiece(\"queen\", \"white\");\n  board[0][4] = createPiece(\"king\", \"black\");\n  board[7][4] = createPiece(\"king\", \"white\");\n\n  moveHistory = [];\n  boardHistory = [];\n  fiftyMoveCounter = 0;\n  enPassantTarget = null;\n  selectedPiece = null;\n  selectedPos = null;\n  currentPlayer = \"white\";\n\n  drawBoard();\n  updateBoardHistory();\n}\n\nfunction resetGame() {\n  clearInterval(clockInterval);\n  menuScreen.style.display = \"block\";\n  gameScreen.style.display = \"none\";\n  initializeBoard();\n}\n\n/* ----- PIECE CREATION ----- */\nfunction createPiece(type, color) {\n  return { type, color, hasMoved: false };\n}\n\n/* ----- DRAWING THE BOARD ----- */\nfunction drawBoard() {\n  boardElement.innerHTML = \"\";\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      let square = document.createElement(\"div\");\n      square.classList.add(\"square\");\n      square.dataset.row = row;\n      square.dataset.col = col;\n      square.classList.add((row + col) % 2 === 0 ? \"light\" : \"dark\");\n\n      if (selectedPos && selectedPos.row === row && selectedPos.col === col) {\n        square.classList.add(\"selected\");\n      }\n\n      if (board[row][col] && board[row][col].type === \"king\") {\n        if (isSquareAttacked(board, { row, col }, getOpponent(board[row][col].color))) {\n          square.classList.add(\"in-check\");\n        }\n      }\n\n      if (board[row][col]) {\n        let pieceEl = document.createElement(\"img\");\n        pieceEl.classList.add(\"piece-img\", board[row][col].color, board[row][col].type);\n        pieceEl.src = getPieceImageSrc(board[row][col]);\n        pieceEl.alt = board[row][col].type;\n        pieceEl.addEventListener(\"mousedown\", onPieceMouseDown);\n        square.appendChild(pieceEl);\n      }\n      square.addEventListener(\"click\", onSquareClick);\n      boardElement.appendChild(square);\n    }\n  }\n}\n\nfunction getPieceImageSrc(piece) {\n  return `assets/${piece.color}_${piece.type}.png`;\n}\n\n/* ----- CLICK HANDLING ----- */\nfunction onSquareClick(e) {\n  if (draggingPieceEl) return;\n\n  const row = parseInt(e.currentTarget.dataset.row);\n  const col = parseInt(e.currentTarget.dataset.col);\n\n  if (board[row][col] && board[row][col].color === currentPlayer) {\n    selectedPiece = board[row][col];\n    selectedPos = { row, col };\n  } else if (selectedPiece) {\n    let move = {\n      from: { row: selectedPos.row, col: selectedPos.col },\n      to: { row, col },\n      piece: selectedPiece,\n    };\n    if (isLegalMove(board, move, currentPlayer)) {\n      makeMove(move);\n    } else {\n      console.log(\"Illegal move attempted:\", move);\n    }\n    selectedPiece = null;\n    selectedPos = null;\n  }\n  drawBoard();\n}\n\n/* ----- DRAG-TO-MOVE HANDLING ----- */\nfunction onPieceMouseDown(e) {\n  const square = e.target.parentElement;\n  const row = parseInt(square.dataset.row);\n  const col = parseInt(square.dataset.col);\n\n  if (board[row][col].color !== currentPlayer) return;\n\n  selectedPiece = board[row][col];\n  selectedPos = { row, col };\n  dragStartPos = { row, col };\n\n  draggingPieceEl = e.target.cloneNode(true);\n  draggingPieceEl.classList.add(\"dragging\");\n  document.body.appendChild(draggingPieceEl);\n\n  const rect = e.target.getBoundingClientRect();\n  dragOffset.x = e.clientX - rect.left;\n  dragOffset.y = e.clientY - rect.top;\n\n  drawBoard();\n\n  document.addEventListener(\"mousemove\", onMouseMove);\n  document.addEventListener(\"mouseup\", onMouseUp);\n}\n\nfunction onMouseMove(e) {\n  if (draggingPieceEl) {\n    draggingPieceEl.style.left = e.clientX - dragOffset.x + \"px\";\n    draggingPieceEl.style.top = e.clientY - dragOffset.y + \"px\";\n  }\n}\n\nfunction onMouseUp(e) {\n  if (!draggingPieceEl) return;\n\n  const boardRect = boardElement.getBoundingClientRect();\n  const x = e.clientX - boardRect.left;\n  const y = e.clientY - boardRect.top;\n  const col = Math.floor(x / 80);\n  const row = Math.floor(y / 80);\n\n  if (row >= 0 && row < 8 && col >= 0 && col < 8) {\n    let move = {\n      from: { row: dragStartPos.row, col: dragStartPos.col },\n      to: { row, col },\n      piece: selectedPiece,\n    };\n    // Detect castling: if king moves two squares horizontally\n    if (\n      move.piece.type === \"king\" &&\n      Math.abs(move.to.col - move.from.col) === 2\n    ) {\n      move.castle = move.to.col > move.from.col ? \"kingside\" : \"queenside\";\n    }\n    if (isLegalMove(board, move, currentPlayer)) {\n      makeMove(move);\n    } else {\n      console.log(\"Illegal move attempted via drag:\", move);\n    }\n  }\n\n  document.body.removeChild(draggingPieceEl);\n  draggingPieceEl = null;\n  dragStartPos = null;\n  selectedPiece = null;\n  selectedPos = null;\n  document.removeEventListener(\"mousemove\", onMouseMove);\n  document.removeEventListener(\"mouseup\", onMouseUp);\n  drawBoard();\n}\n\n/* ----- MAKING MOVES ----- */\nfunction makeMove(move) {\n  if (isCastlingMove(move)) {\n    performCastle(move);\n  } else if (isEnPassantMove(move)) {\n    performEnPassant(move);\n  } else {\n    board[move.to.row][move.to.col] = move.piece;\n    board[move.from.row][move.from.col] = null;\n    if (move.piece.type === \"pawn\" && isLastRank(move.to, move.piece.color)) {\n      showPromotionModal(move);\n      return;\n    }\n  }\n  move.piece.hasMoved = true;\n  handlePawnDoubleStep(move);\n  moveHistory.push(move);\n  updateFiftyMoveCounter(move);\n  updateBoardHistory();\n\n  // Switch turn. currentPlayer becomes the player who is about to move.\n  currentPlayer = getOpponent(currentPlayer);\n  startClock();\n\n  // FIXED: Check for checkmate on the current player's turn\n  if (checkForCheckmate(board, currentPlayer)) {\n    alert(\"Checkmate! \" + getOpponent(currentPlayer) + \" wins.\");\n    clearInterval(clockInterval);\n    resetGame();\n    return;\n  } else if (checkForStalemate(board, currentPlayer)) {\n    alert(\"Stalemate!\");\n    clearInterval(clockInterval);\n    resetGame();\n    return;\n  } else if (isThreefoldRepetition()) {\n    alert(\"Draw by threefold repetition!\");\n    clearInterval(clockInterval);\n    resetGame();\n    return;\n  } else if (isFiftyMoveRule()) {\n    alert(\"Draw by fifty-move rule!\");\n    clearInterval(clockInterval);\n    resetGame();\n    return;\n  }\n\n  selectedPiece = null;\n  selectedPos = null;\n  drawBoard();\n}\n\n/* ----- MOVE GENERATION ----- */\nfunction generateMovesForPiece(board, pos) {\n  let piece = board[pos.row][pos.col];\n  if (!piece) return [];\n  let moves = [];\n  switch (piece.type) {\n    case \"pawn\":\n      moves = generatePawnMoves(board, pos, piece);\n      break;\n    case \"rook\":\n      // Friendly rooks: restrict moves to prime number of squares.\n      moves = generateRookMoves(board, pos, piece);\n      break;\n    case \"knight\":\n      moves = generateKnightMoves(board, pos, piece);\n      break;\n    case \"bishop\":\n      moves = generateBishopMoves(board, pos, piece);\n      break;\n    case \"queen\":\n      // For queen, use default rook moves (no prime restriction) plus bishop moves.\n      moves = generateRookMovesDefault(board, pos, piece).concat(\n        generateBishopMoves(board, pos, piece)\n      );\n      break;\n    case \"king\":\n      moves = generateKingMoves(board, pos, piece);\n      moves = moves.concat(generateCastlingMoves(board, pos, piece));\n      break;\n  }\n  return moves;\n}\n\nfunction generatePawnMoves(board, pos, piece) {\n  let moves = [];\n  let direction = piece.color === \"white\" ? -1 : 1;\n  let startRow = piece.color === \"white\" ? 6 : 1;\n  let nextRow = pos.row + direction;\n  if (isInBounds(nextRow, pos.col) && board[nextRow][pos.col] === null) {\n    moves.push({ from: pos, to: { row: nextRow, col: pos.col }, piece });\n    if (\n      pos.row === startRow &&\n      isInBounds(nextRow + direction, pos.col) &&\n      board[nextRow + direction][pos.col] === null\n    ) {\n      moves.push({\n        from: pos,\n        to: { row: nextRow + direction, col: pos.col },\n        piece,\n      });\n    }\n  }\n  for (let dc of [-1, 1]) {\n    let newCol = pos.col + dc;\n    if (isInBounds(nextRow, newCol)) {\n      if (board[nextRow][newCol] && board[nextRow][newCol].color !== piece.color) {\n        moves.push({ from: pos, to: { row: nextRow, col: newCol }, piece });\n      }\n      if (\n        board[nextRow][newCol] === null &&\n        enPassantTarget &&\n        enPassantTarget.row === nextRow &&\n        enPassantTarget.col === newCol\n      ) {\n        moves.push({ from: pos, to: { row: nextRow, col: newCol }, piece, enPassant: true });\n      }\n    }\n  }\n  return moves;\n}\n\n/* Modified Rook Moves: For friendly rooks, allow moves only if the number of squares moved is prime (2, 3, 5, or 7) */\nfunction generateRookMoves(board, pos, piece) {\n  let moves = [];\n  let directions = [\n    [1, 0],\n    [-1, 0],\n    [0, 1],\n    [0, -1],\n  ];\n  directions.forEach((d) => {\n    let r = pos.row;\n    let c = pos.col;\n    let steps = 0;\n    while (true) {\n      r += d[0];\n      c += d[1];\n      steps++;\n      if (!isInBounds(r, c)) break;\n      if (isPrime(steps)) {\n        if (board[r][c] === null) {\n          moves.push({ from: pos, to: { row: r, col: c }, piece });\n        } else {\n          if (board[r][c].color !== piece.color) {\n            moves.push({ from: pos, to: { row: r, col: c }, piece });\n          }\n          break;\n        }\n      } else {\n        if (board[r][c] !== null) break;\n      }\n    }\n  });\n  return moves;\n}\n\n/* Default Rook Moves for queen moves and enemy attack detection (no prime restriction) */\nfunction generateRookMovesDefault(board, pos, piece) {\n  let moves = [];\n  let directions = [\n    [1, 0],\n    [-1, 0],\n    [0, 1],\n    [0, -1],\n  ];\n  directions.forEach((d) => {\n    let r = pos.row;\n    let c = pos.col;\n    while (true) {\n      r += d[0];\n      c += d[1];\n      if (!isInBounds(r, c)) break;\n      if (board[r][c] === null) {\n        moves.push({ from: pos, to: { row: r, col: c }, piece });\n      } else {\n        moves.push({ from: pos, to: { row: r, col: c }, piece });\n        break;\n      }\n    }\n  });\n  return moves;\n}\n\nfunction generateKnightMoves(board, pos, piece) {\n  let moves = [];\n  let offsets = [\n    [-2, -1],\n    [-2, 1],\n    [-1, -2],\n    [-1, 2],\n    [1, -2],\n    [1, 2],\n    [2, -1],\n    [2, 1],\n  ];\n  offsets.forEach((o) => {\n    let r = pos.row + o[0];\n    let c = pos.col + o[1];\n    if (isInBounds(r, c) && (!board[r][c] || board[r][c].color !== piece.color)) {\n      moves.push({ from: pos, to: { row: r, col: c }, piece });\n    }\n  });\n  return moves;\n}\n\nfunction generateBishopMoves(board, pos, piece) {\n  let moves = [];\n  let directions = [\n    [1, 1],\n    [1, -1],\n    [-1, 1],\n    [-1, -1],\n  ];\n  directions.forEach((d) => {\n    for (let steps = 1; steps < 8; steps++) {\n      let r = pos.row + d[0] * steps;\n      let c = pos.col + d[1] * steps;\n      if (!isInBounds(r, c)) break;\n\n      // Skip if destination is occupied by a friendly piece\n      let destSquare = board[r][c];\n      if (destSquare && destSquare.color === piece.color) continue;\n\n      let standardPathValid = true;\n      let modifiedPawnCount = 0;\n      let modifiedPathValid = true;\n\n      // Check standard path validity (all intermediate squares empty)\n      for (let s = 1; s < steps; s++) {\n        let currentR = pos.row + d[0] * s;\n        let currentC = pos.col + d[1] * s;\n        if (board[currentR][currentC] !== null) {\n          standardPathValid = false;\n          break;\n        }\n      }\n\n      // Check modified path validity (exactly one pawn in intermediate squares)\n      for (let s = 1; s < steps; s++) {\n        let currentR = pos.row + d[0] * s;\n        let currentC = pos.col + d[1] * s;\n        let square = board[currentR][currentC];\n        if (square) {\n          if (square.type === 'pawn') {\n            modifiedPawnCount++;\n            if (modifiedPawnCount > 1) {\n              modifiedPathValid = false;\n              break;\n            }\n          } else {\n            modifiedPathValid = false;\n            break;\n          }\n        }\n      }\n      modifiedPathValid = modifiedPathValid && modifiedPawnCount === 1;\n\n      // Add move if either path is valid\n      if (standardPathValid || modifiedPathValid) {\n        moves.push({ from: pos, to: { row: r, col: c }, piece });\n      }\n    }\n  });\n  return moves;\n}\n\nfunction generateQueenMoves(board, pos, piece) {\n  // Queen moves = default rook moves (no prime restriction) + bishop moves\n  return generateRookMovesDefault(board, pos, piece).concat(\n    generateBishopMoves(board, pos, piece)\n  );\n}\n\nfunction generateKingMoves(board, pos, piece) {\n  let moves = [];\n  for (let r = pos.row - 1; r <= pos.row + 1; r++) {\n    for (let c = pos.col - 1; c <= pos.col + 1; c++) {\n      if (r === pos.row && c === pos.col) continue;\n      if (isInBounds(r, c) && (!board[r][c] || board[r][c].color !== piece.color)) {\n        moves.push({ from: pos, to: { row: r, col: c }, piece });\n      }\n    }\n  }\n  return moves;\n}\n\nfunction generateCastlingMoves(board, pos, king) {\n  let moves = [];\n  if (king.hasMoved) return moves;\n  if (canCastle(board, king, { side: \"kingside\", pos })) {\n    moves.push({\n      from: pos,\n      to: { row: pos.row, col: pos.col + 2 },\n      piece: king,\n      castle: \"kingside\",\n    });\n  }\n  if (canCastle(board, king, { side: \"queenside\", pos })) {\n    moves.push({\n      from: pos,\n      to: { row: pos.row, col: pos.col - 2 },\n      piece: king,\n      castle: \"queenside\",\n    });\n  }\n  return moves;\n}\n\n/* ----- CASTLING LOGIC ----- */\nfunction canCastle(board, king, { side, pos }) {\n  let row = pos.row;\n  if (king.hasMoved) return false;\n  if (side === \"kingside\") {\n    let rook = board[row][7];\n    if (!rook || rook.type !== \"rook\" || rook.hasMoved) return false;\n    if (board[row][5] !== null || board[row][6] !== null) return false;\n    if (\n      !isSquareSafeForKing(board, { row, col: 4 }, king.color) ||\n      !isSquareSafeForKing(board, { row, col: 5 }, king.color) ||\n      !isSquareSafeForKing(board, { row, col: 6 }, king.color)\n    )\n      return false;\n    return true;\n  } else if (side === \"queenside\") {\n    let rook = board[row][0];\n    if (!rook || rook.type !== \"rook\" || rook.hasMoved) return false;\n    if (board[row][1] !== null || board[row][2] !== null || board[row][3] !== null)\n      return false;\n    if (\n      !isSquareSafeForKing(board, { row, col: 4 }, king.color) ||\n      !isSquareSafeForKing(board, { row, col: 3 }, king.color) ||\n      !isSquareSafeForKing(board, { row, col: 2 }, king.color)\n    )\n      return false;\n    return true;\n  }\n  return false;\n}\n\nfunction isSquareSafeForKing(board, pos, color) {\n  let tempBoard = cloneBoard(board);\n  tempBoard[pos.row][pos.col] = { type: \"king\", color, hasMoved: true };\n  return isKingSafe(tempBoard, color);\n}\n\n/* ----- HELPER FUNCTIONS ----- */\nfunction isInBounds(row, col) {\n  return row >= 0 && row < 8 && col >= 0 && col < 8;\n}\n\nfunction cloneBoard(board) {\n  return board.map((row) => row.map((cell) => (cell ? { ...cell } : null)));\n}\n\nfunction isKingSafe(board, color) {\n  let kingPos = findKing(board, color);\n  if (!kingPos) return false;\n  return !isSquareAttacked(board, kingPos, getOpponent(color));\n}\n\nfunction findKing(board, color) {\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      let piece = board[r][c];\n      if (piece && piece.type === \"king\" && piece.color === color) {\n        return { row: r, col: c };\n      }\n    }\n  }\n  return null;\n}\n\nfunction isSquareAttacked(board, pos, attackerColor) {\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      let piece = board[r][c];\n      if (piece && piece.color === attackerColor) {\n        let moves;\n        if (piece.type === \"rook\") {\n          // For enemy rooks, use full-range moves (default) for attack detection.\n          moves = generateRookMovesDefault(board, { row: r, col: c }, piece);\n        } else {\n          moves = generateMovesForPiece(board, { row: r, col: c });\n        }\n        for (let move of moves) {\n          if (move.to.row === pos.row && move.to.col === pos.col) return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nfunction getOpponent(color) {\n  return color === \"white\" ? \"black\" : \"white\";\n}\n\n/* ----- EN PASSANT LOGIC ----- */\nfunction handlePawnDoubleStep(move) {\n  if (\n    move.piece.type === \"pawn\" &&\n    Math.abs(move.from.row - move.to.row) === 2\n  ) {\n    enPassantTarget = {\n      row: (move.from.row + move.to.row) / 2,\n      col: move.from.col,\n    };\n  } else {\n    enPassantTarget = null;\n  }\n}\n\nfunction isEnPassantMove(move) {\n  return (\n    move.piece.type === \"pawn\" &&\n    move.from.col !== move.to.col &&\n    board[move.to.row][move.to.col] === null\n  );\n}\n\nfunction performEnPassant(move) {\n  board[move.to.row][move.to.col] = move.piece;\n  board[move.from.row][move.from.col] = null;\n  let captureRow = move.piece.color === \"white\" ? move.to.row + 1 : move.to.row - 1;\n  board[captureRow][move.to.col] = null;\n}\n\n/* ----- CASTLING HANDLING ----- */\nfunction isCastlingMove(move) {\n  return (\n    move.piece.type === \"king\" && Math.abs(move.to.col - move.from.col) === 2\n  );\n}\n\nfunction performCastle(move) {\n  let row = move.from.row;\n  if (move.castle === \"kingside\") {\n    board[row][6] = move.piece;\n    board[row][4] = null;\n    let rook = board[row][7];\n    board[row][5] = rook;\n    board[row][7] = null;\n    rook.hasMoved = true;\n  } else if (move.castle === \"queenside\") {\n    board[row][2] = move.piece;\n    board[row][4] = null;\n    let rook = board[row][0];\n    board[row][3] = rook;\n    board[row][0] = null;\n    rook.hasMoved = true;\n  }\n}\n\n/* ----- PAWN PROMOTION ----- */\nfunction isLastRank(pos, color) {\n  return (color === \"white\" && pos.row === 0) || (color === \"black\" && pos.row === 7);\n}\n\nfunction showPromotionModal(move) {\n  promotionModal.style.display = \"block\";\n  promotionModal.dataset.fromRow = move.from.row;\n  promotionModal.dataset.fromCol = move.from.col;\n  promotionModal.dataset.toRow = move.to.row;\n  promotionModal.dataset.toCol = move.to.col;\n  promotionModal.dataset.color = move.piece.color;\n  promotionModal.dataset.pieceType = move.piece.type;\n}\n\npromotionChoices.forEach((choice) => {\n  choice.addEventListener(\"click\", function () {\n    let selectedType = this.dataset.type;\n    let move = {\n      from: {\n        row: parseInt(promotionModal.dataset.fromRow),\n        col: parseInt(promotionModal.dataset.fromCol),\n      },\n      to: {\n        row: parseInt(promotionModal.dataset.toRow),\n        col: parseInt(promotionModal.dataset.toCol),\n      },\n      piece: {\n        type: promotionModal.dataset.pieceType,\n        color: promotionModal.dataset.color,\n      },\n    };\n    board[move.to.row][move.to.col] = createPiece(selectedType, move.piece.color);\n    board[move.from.row][move.from.col] = null;\n    promotionModal.style.display = \"none\";\n    board[move.to.row][move.to.col].hasMoved = true;\n    moveHistory.push(move);\n    updateFiftyMoveCounter(move);\n    updateBoardHistory();\n    if (checkForCheckmate(board, getOpponent(currentPlayer))) {\n      alert(\"Checkmate! \" + getOpponent(currentPlayer) + \" wins.\");\n      clearInterval(clockInterval);\n      resetGame();\n      return;\n    } else if (checkForStalemate(board, getOpponent(currentPlayer))) {\n      alert(\"Stalemate!\");\n      clearInterval(clockInterval);\n      resetGame();\n      return;\n    }\n    currentPlayer = getOpponent(currentPlayer);\n    startClock();\n    selectedPiece = null;\n    selectedPos = null;\n    drawBoard();\n  });\n});\n\n/* ----- BOARD HISTORY & DRAWING RULES ----- */\nfunction serializeBoard(board) {\n  return board\n    .map((row) =>\n      row.map((cell) => (cell ? cell.type[0] + cell.color[0] : \"  \")).join(\"\")\n    )\n    .join(\"|\");\n}\n\nfunction updateBoardHistory() {\n  boardHistory.push(serializeBoard(board));\n}\n\nfunction isThreefoldRepetition() {\n  let counts = {};\n  boardHistory.forEach((state) => {\n    counts[state] = (counts[state] || 0) + 1;\n  });\n  return Object.values(counts).some((count) => count >= 3);\n}\n\nfunction updateFiftyMoveCounter(move) {\n  if (move.piece.type === \"pawn\" || board[move.to.row][move.to.col] !== null) {\n    fiftyMoveCounter = 0;\n  } else {\n    fiftyMoveCounter++;\n  }\n}\n\nfunction isFiftyMoveRule() {\n  return fiftyMoveCounter >= 50;\n}\n\n/* ----- CHECKMATE & STALEMATE ----- */\n// Checkmate: the current player's king is in check and has no legal moves.\nfunction checkForCheckmate(board, color) {\n  if (!isKingSafe(board, color)) {\n    let moves = generateAllMoves(board, color);\n    let legalMoves = moves.filter((m) => isLegalMove(board, m, color));\n    if (legalMoves.length === 0) {\n      console.log(\"Checkmate detected for\", color);\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction checkForStalemate(board, color) {\n  if (isKingSafe(board, color)) {\n    let moves = generateAllMoves(board, color);\n    let legalMoves = moves.filter((m) => isLegalMove(board, m, color));\n    if (legalMoves.length === 0) return true;\n  }\n  return false;\n}\n\nfunction generateAllMoves(board, color) {\n  let moves = [];\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      let piece = board[r][c];\n      if (piece && piece.color === color) {\n        moves = moves.concat(generateMovesForPiece(board, { row: r, col: c }));\n      }\n    }\n  }\n  return moves;\n}\n\n/* ----- MOVE VALIDATION ----- */\nfunction isLegalMove(board, move, color) {\n  let moves = generateMovesForPiece(board, move.from);\n  let legal = moves.some(\n    (m) => m.to.row === move.to.row && m.to.col === move.to.col\n  );\n  if (!legal) {\n    console.log(\"Move not in generated moves:\", move);\n    return false;\n  }\n\n  let newBoard = cloneBoard(board);\n  newBoard[move.to.row][move.to.col] = newBoard[move.from.row][move.from.col];\n  newBoard[move.from.row][move.from.col] = null;\n\n  let kingPos = findKing(newBoard, color);\n  if (!kingPos) {\n    console.log(\"King not found after move:\", move);\n    return false;\n  }\n\n  if (!isKingSafe(newBoard, color)) {\n    console.log(\"King would be in check after move:\", move, \"King at:\", kingPos);\n    return false;\n  }\n\n  return true;\n}\n\n/* ----- END GAME INITIALIZATION ----- */\n// Only initialize if running in browser\nif (typeof process === 'undefined' || !process.env.NODE_ENV === 'test') {\n  initializeBoard();\n}\n\n\n// Export for Jest testing while maintaining browser compatibility\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = {\n    isPrime,\n    generateRookMoves,\n    generatePawnMoves,\n    isLegalMove,\n    initializeBoard,\n    checkForCheckmate,\n    isSquareAttacked,\n    serializeBoard,\n    cloneBoard,\n    getOpponent,\n    performCastle,\n    canCastle,\n    isEnPassantMove,\n    generateMovesForPiece,\n    isInBounds,\n    isKingSafe,\n    createPiece,\n    enPassantTarget\n  };\n}"],"mappings":"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","ignoreList":[]}},"mtime":1743345741490},"{\"assumptions\":{},\"sourceRoot\":\"/home/bayern/Chess_Temp/test/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/bayern/Chess_Temp\",\"filename\":\"/home/bayern/Chess_Temp/test/game.test.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/bayern/Chess_Temp\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-duplicate-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regexp-modifiers\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$3\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$4\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$5\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$6\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$7\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$8\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$9\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$10\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$11\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$12\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$16\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$17\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.26.10:development":{"value":{"code":"\"use strict\";\n\nconst {\n  expect\n} = require('chai');\nlet {\n  isPrime,\n  generateRookMoves,\n  generatePawnMoves,\n  isLegalMove,\n  initializeBoard,\n  checkForCheckmate,\n  isSquareAttacked,\n  serializeBoard,\n  cloneBoard,\n  getOpponent,\n  isInBounds,\n  isKingSafe,\n  performCastle,\n  canCastle,\n  isEnPassantMove,\n  generateMovesForPiece,\n  createPiece,\n  enPassantTarget\n} = require('../gameController');\ndescribe('Chess Game Tests', () => {\n  let testBoard;\n  before(() => {\n    // Create a fresh board with just the pieces we need for testing\n    testBoard = Array(8).fill().map(() => Array(8).fill(null));\n  });\n  beforeEach(() => {\n    testBoard = initializeBoard();\n  });\n  describe('Prime Number Validation', () => {\n    it('should identify prime numbers correctly', () => {\n      expect(isPrime(2)).to.be.true;\n      expect(isPrime(7)).to.be.true;\n      expect(isPrime(1)).to.be.false;\n      expect(isPrime(4)).to.be.false;\n      expect(isPrime(9)).to.be.false;\n    });\n  });\n  describe('Rook Movement', () => {\n    it('should only allow prime-numbered moves for all rooks', () => {\n      // Test both friendly and enemy rooks\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n\n      // Friendly rook (white)\n      testBoard[3][3] = {\n        type: 'rook',\n        color: 'white',\n        hasMoved: false\n      };\n      const friendlyMoves = generateRookMoves(testBoard, {\n        row: 3,\n        col: 3\n      }, testBoard[3][3]);\n\n      // Enemy rook (black)\n      testBoard[4][4] = {\n        type: 'rook',\n        color: 'black',\n        hasMoved: false\n      };\n      const enemyMoves = generateRookMoves(testBoard, {\n        row: 4,\n        col: 4\n      }, testBoard[4][4]);\n      const allowedDistances = new Set([2, 3, 5, 7]);\n\n      // Verify both rooks follow prime movement rules\n      [...friendlyMoves, ...enemyMoves].forEach(move => {\n        const dx = Math.abs(move.to.col - move.from.col);\n        const dy = Math.abs(move.to.row - move.from.row);\n        const distance = dx + dy; // Since rook moves straight\n        expect(allowedDistances.has(distance)).to.be.true;\n      });\n    });\n  });\n  describe('Pawn Movement', () => {\n    let testBoard;\n    beforeEach(() => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      enPassantTarget = null; // Reset enPassant target\n    });\n\n    // it('should detect en passant opportunities', () => {\n    //   // Set up pawns\n    //   testBoard[3][3] = { type: 'pawn', color: 'white', hasMoved: true };\n    //   testBoard[3][4] = { type: 'pawn', color: 'black', hasMoved: true };\n\n    //   // Simulate the double-step pawn move that creates en passant opportunity\n    //   const move = {\n    //     from: { row: 1, col: 4 },\n    //     to: { row: 3, col: 4 },\n    //     piece: testBoard[3][4],\n    //     color: 'black'\n    //   };\n\n    //   // Update enPassantTarget as the game would\n    //   enPassantTarget = { row: 2, col: 4 };\n\n    //   // Get white pawn's moves\n    //   const whitePawnMoves = generatePawnMoves(testBoard, { row: 3, col: 3 }, testBoard[3][3]);\n\n    //   // Verify en passant move exists diagonally\n    //   expect(whitePawnMoves).to.deep.include({\n    //     from: { row: 3, col: 3 },\n    //     to: { row: 2, col: 4 },\n    //     piece: testBoard[3][3],\n    //     enPassant: true\n    //   });\n    // });\n\n    it('should trigger promotion on last rank', () => {\n      const pawn = {\n        type: 'pawn',\n        color: 'white',\n        hasMoved: true\n      };\n      testBoard[1][0] = pawn;\n      const moves = generatePawnMoves(testBoard, {\n        row: 1,\n        col: 0\n      }, pawn);\n      expect(moves.some(m => m.to.row === 0)).to.be.true;\n    });\n  });\n  describe('Check Detection', () => {\n    let testBoard;\n    beforeEach(() => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n    });\n    it('should identify attacked squares', () => {\n      // Place black rook in same column as white king\n      testBoard[0][4] = createPiece('rook', 'black'); // Top of column 4\n      testBoard[4][4] = createPiece('king', 'white'); // Center king\n\n      expect(isSquareAttacked(testBoard, {\n        row: 4,\n        col: 4\n      }, 'black')).to.be.true;\n    });\n    it('should detect checkmate state', () => {\n      // Proper checkmate setup\n      testBoard[7][4] = createPiece('king', 'white'); // White king in corner\n      testBoard[6][3] = createPiece('queen', 'black'); // Queen attacking diagonally\n      testBoard[7][5] = createPiece('rook', 'black'); // Rook blocking escape\n\n      // Debug checks\n      console.log(\"Is king safe:\", isKingSafe(testBoard, 'white'));\n      const allMoves = generateAllMoves(testBoard, 'white');\n      console.log(\"All moves generated:\", allMoves.length);\n      const legalMoves = allMoves.filter(m => isLegalMove(testBoard, m, 'white'));\n      console.log(\"Legal moves:\", legalMoves.length);\n      if (legalMoves.length > 0) {\n        console.log(\"Legal moves found:\", legalMoves);\n      }\n\n      // Verify no legal moves\n      expect(checkForCheckmate(testBoard, 'white')).to.be.true;\n    });\n  });\n  describe('Castling', () => {\n    beforeEach(() => {\n      // Create fresh board with only necessary pieces\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n\n      // Set up castling scenario\n      testBoard[7][4] = createPiece('king', 'white'); // White king\n      testBoard[7][7] = createPiece('rook', 'white'); // Kingside rook\n    });\n    it('should allow kingside castling when valid', () => {\n      testBoard[7][5] = null;\n      testBoard[7][6] = null;\n      const king = testBoard[7][4]; // Don't forget to define king\n\n      expect(canCastle(testBoard, king, {\n        side: 'kingside',\n        pos: {\n          row: 7,\n          col: 4\n        }\n      })).to.be.true;\n    });\n    it('should prevent castling through attacked squares', () => {\n      testBoard[7][5] = null;\n      testBoard[7][6] = null;\n      testBoard[6][5] = {\n        type: 'bishop',\n        color: 'black',\n        hasMoved: true\n      };\n      const king = testBoard[7][4]; // Don't forget to define king\n\n      expect(canCastle(testBoard, king, {\n        side: 'kingside',\n        pos: {\n          row: 7,\n          col: 4\n        }\n      })).to.be.false;\n    });\n  });\n  describe('Board State Management', () => {\n    // it('should clone board correctly', () => {\n    //   const cloned = cloneBoard(testBoard);\n    //   cloned[0][0].hasMoved = true;\n    //   expect(testBoard[0][0].hasMoved).to.be.false;\n    // });\n\n    // it('should serialize board state', () => {\n    //   const serialized = serializeBoard(testBoard);\n    //   expect(serialized).to.include('rw|bw'); // Rook white and bishop white\n    // });\n  });\n  describe('Helper Functions', () => {\n    it('should identify opponent color', () => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      expect(getOpponent('white')).to.equal('black');\n      expect(getOpponent('black')).to.equal('white');\n    });\n    it('should validate board boundaries', () => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      expect(isInBounds(7, 7)).to.be.true;\n      expect(isInBounds(-1, 3)).to.be.false;\n      expect(isInBounds(4, 8)).to.be.false;\n    });\n\n    // it('should generate all legal moves', () => {\n    //   testBoard = Array(8).fill().map(() => Array(8).fill(null));\n    //   const initialMoves = generateMovesForPiece(testBoard, { row: 6, col: 0 }, testBoard[6][0]);\n    //   expect(initialMoves).to.have.lengthOf(2); // Initial pawn move\n    // });\n  });\n  describe('Special Moves', () => {\n    let testBoard;\n    beforeEach(() => {\n      // Create fresh board with proper castling setup\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      testBoard[7][4] = {\n        type: 'king',\n        color: 'white',\n        hasMoved: false // Crucial for castling\n      };\n      testBoard[7][7] = {\n        type: 'rook',\n        color: 'white',\n        hasMoved: false // Crucial for castling\n      };\n      // Clear the castling path\n      testBoard[7][5] = null;\n      testBoard[7][6] = null;\n    });\n    it('should detect en passant moves', () => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      const move = {\n        piece: {\n          type: 'pawn',\n          color: 'black'\n        },\n        from: {\n          row: 1,\n          col: 3\n        },\n        to: {\n          row: 3,\n          col: 3\n        }\n      };\n      expect(isEnPassantMove(move)).to.be.false; // Should only be true in specific context\n    });\n\n    //   it('should execute castling correctly', () => {\n    //   const king = testBoard[7][4];\n    //   const castleMove = {\n    //     from: { row: 7, col: 4 },\n    //     to: { row: 7, col: 6 },\n    //     piece: king,\n    //     castle: 'kingside'\n    //   };\n\n    //   performCastle(castleMove);\n\n    //   // Verify king moved\n    //   expect(testBoard[7][6]).to.deep.equal({\n    //     type: 'king',\n    //     color: 'white',\n    //     hasMoved: true\n    //   });\n\n    //   // Verify rook moved\n    //   expect(testBoard[7][5]).to.deep.equal({\n    //     type: 'rook',\n    //     color: 'white',\n    //     hasMoved: true\n    //   });\n\n    //   // Verify original positions are empty\n    //   expect(testBoard[7][4]).to.be.null;\n    //   expect(testBoard[7][7]).to.be.null;\n    // });\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["expect","require","isPrime","generateRookMoves","generatePawnMoves","isLegalMove","initializeBoard","checkForCheckmate","isSquareAttacked","serializeBoard","cloneBoard","getOpponent","isInBounds","isKingSafe","performCastle","canCastle","isEnPassantMove","generateMovesForPiece","createPiece","enPassantTarget","describe","testBoard","before","Array","fill","map","beforeEach","it","to","be","true","false","type","color","hasMoved","friendlyMoves","row","col","enemyMoves","allowedDistances","Set","forEach","move","dx","Math","abs","from","dy","distance","has","pawn","moves","some","m","console","log","allMoves","generateAllMoves","length","legalMoves","filter","king","side","pos","equal","piece"],"sourceRoot":"/home/bayern/Chess_Temp/test/","sources":["game.test.js"],"sourcesContent":["const { expect } = require('chai');\nlet {\n  isPrime,\n  generateRookMoves,\n  generatePawnMoves,\n  isLegalMove,\n  initializeBoard,\n  checkForCheckmate,\n  isSquareAttacked,\n  serializeBoard,\n  cloneBoard,\n  getOpponent,\n  isInBounds,\n  isKingSafe,\n  performCastle,\n  canCastle,\n  isEnPassantMove,\n  generateMovesForPiece,\n  createPiece,\n  enPassantTarget\n} = require('../gameController');\n\ndescribe('Chess Game Tests', () => {\n  let testBoard;\n\n  before(() => {\n    // Create a fresh board with just the pieces we need for testing\n    testBoard = Array(8).fill().map(() => Array(8).fill(null));\n  });\n\n  beforeEach(() => {\n    testBoard = initializeBoard();\n  });\n\n  describe('Prime Number Validation', () => {\n    it('should identify prime numbers correctly', () => {\n      expect(isPrime(2)).to.be.true;\n      expect(isPrime(7)).to.be.true;\n      expect(isPrime(1)).to.be.false;\n      expect(isPrime(4)).to.be.false;\n      expect(isPrime(9)).to.be.false;\n    });\n  });\n\n  describe('Rook Movement', () => {\n    it('should only allow prime-numbered moves for all rooks', () => {\n      // Test both friendly and enemy rooks\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      \n      // Friendly rook (white)\n      testBoard[3][3] = { type: 'rook', color: 'white', hasMoved: false };\n      const friendlyMoves = generateRookMoves(testBoard, { row: 3, col: 3 }, testBoard[3][3]);\n      \n      // Enemy rook (black)\n      testBoard[4][4] = { type: 'rook', color: 'black', hasMoved: false };\n      const enemyMoves = generateRookMoves(testBoard, { row: 4, col: 4 }, testBoard[4][4]);\n      \n      const allowedDistances = new Set([2, 3, 5, 7]);\n      \n      // Verify both rooks follow prime movement rules\n      [...friendlyMoves, ...enemyMoves].forEach(move => {\n        const dx = Math.abs(move.to.col - move.from.col);\n        const dy = Math.abs(move.to.row - move.from.row);\n        const distance = dx + dy; // Since rook moves straight\n        expect(allowedDistances.has(distance)).to.be.true;\n      });\n    });\n  });\n\n  describe('Pawn Movement', () => {\n    let testBoard;\n  \n    beforeEach(() => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      enPassantTarget = null; // Reset enPassant target\n    });\n  \n    // it('should detect en passant opportunities', () => {\n    //   // Set up pawns\n    //   testBoard[3][3] = { type: 'pawn', color: 'white', hasMoved: true };\n    //   testBoard[3][4] = { type: 'pawn', color: 'black', hasMoved: true };\n  \n    //   // Simulate the double-step pawn move that creates en passant opportunity\n    //   const move = {\n    //     from: { row: 1, col: 4 },\n    //     to: { row: 3, col: 4 },\n    //     piece: testBoard[3][4],\n    //     color: 'black'\n    //   };\n      \n    //   // Update enPassantTarget as the game would\n    //   enPassantTarget = { row: 2, col: 4 };\n  \n    //   // Get white pawn's moves\n    //   const whitePawnMoves = generatePawnMoves(testBoard, { row: 3, col: 3 }, testBoard[3][3]);\n      \n    //   // Verify en passant move exists diagonally\n    //   expect(whitePawnMoves).to.deep.include({\n    //     from: { row: 3, col: 3 },\n    //     to: { row: 2, col: 4 },\n    //     piece: testBoard[3][3],\n    //     enPassant: true\n    //   });\n    // });\n  \n    it('should trigger promotion on last rank', () => {\n      const pawn = { type: 'pawn', color: 'white', hasMoved: true };\n      testBoard[1][0] = pawn;\n      \n      const moves = generatePawnMoves(testBoard, { row: 1, col: 0 }, pawn);\n      expect(moves.some(m => m.to.row === 0)).to.be.true;\n    });\n  });\n\n  describe('Check Detection', () => {\n    let testBoard;\n  \n    beforeEach(() => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n    });\n  \n    it('should identify attacked squares', () => {\n      // Place black rook in same column as white king\n      testBoard[0][4] = createPiece('rook', 'black'); // Top of column 4\n      testBoard[4][4] = createPiece('king', 'white'); // Center king\n      \n      expect(isSquareAttacked(testBoard, { row: 4, col: 4 }, 'black')).to.be.true;\n    });\n  \n    it('should detect checkmate state', () => {\n      // Proper checkmate setup\n      testBoard[7][4] = createPiece('king', 'white'); // White king in corner\n      testBoard[6][3] = createPiece('queen', 'black'); // Queen attacking diagonally\n      testBoard[7][5] = createPiece('rook', 'black'); // Rook blocking escape\n      \n      // Debug checks\n      console.log(\"Is king safe:\", isKingSafe(testBoard, 'white'));\n      \n      const allMoves = generateAllMoves(testBoard, 'white');\n      console.log(\"All moves generated:\", allMoves.length);\n      \n      const legalMoves = allMoves.filter(m => isLegalMove(testBoard, m, 'white'));\n      console.log(\"Legal moves:\", legalMoves.length);\n      if (legalMoves.length > 0) {\n        console.log(\"Legal moves found:\", legalMoves);\n      }\n      \n      // Verify no legal moves\n      expect(checkForCheckmate(testBoard, 'white')).to.be.true;\n    });\n  });\n\n  describe('Castling', () => {\n    beforeEach(() => {\n      // Create fresh board with only necessary pieces\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      \n      // Set up castling scenario\n      testBoard[7][4] = createPiece('king', 'white');  // White king\n      testBoard[7][7] = createPiece('rook', 'white');  // Kingside rook\n    });\n\n    it('should allow kingside castling when valid', () => {\n      testBoard[7][5] = null;\n      testBoard[7][6] = null;\n      const king = testBoard[7][4]; // Don't forget to define king\n      \n      expect(canCastle(testBoard, king, { side: 'kingside', pos: { row: 7, col: 4 }})).to.be.true;\n    });\n\n    it('should prevent castling through attacked squares', () => {\n      testBoard[7][5] = null;\n      testBoard[7][6] = null;\n      testBoard[6][5] = { type: 'bishop', color: 'black', hasMoved: true };\n      const king = testBoard[7][4]; // Don't forget to define king\n      \n      expect(canCastle(testBoard, king, { side: 'kingside', pos: { row: 7, col: 4 }})).to.be.false;\n    });\n  });\n\n  describe('Board State Management', () => {\n    // it('should clone board correctly', () => {\n    //   const cloned = cloneBoard(testBoard);\n    //   cloned[0][0].hasMoved = true;\n    //   expect(testBoard[0][0].hasMoved).to.be.false;\n    // });\n\n    // it('should serialize board state', () => {\n    //   const serialized = serializeBoard(testBoard);\n    //   expect(serialized).to.include('rw|bw'); // Rook white and bishop white\n    // });\n  });\n\n  describe('Helper Functions', () => {\n    it('should identify opponent color', () => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      expect(getOpponent('white')).to.equal('black');\n      expect(getOpponent('black')).to.equal('white');\n    });\n\n    it('should validate board boundaries', () => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      expect(isInBounds(7, 7)).to.be.true;\n      expect(isInBounds(-1, 3)).to.be.false;\n      expect(isInBounds(4, 8)).to.be.false;\n    });\n\n    // it('should generate all legal moves', () => {\n    //   testBoard = Array(8).fill().map(() => Array(8).fill(null));\n    //   const initialMoves = generateMovesForPiece(testBoard, { row: 6, col: 0 }, testBoard[6][0]);\n    //   expect(initialMoves).to.have.lengthOf(2); // Initial pawn move\n    // });\n  });\n\n  describe('Special Moves', () => {\n    let testBoard;\n\n    beforeEach(() => {\n      // Create fresh board with proper castling setup\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      testBoard[7][4] = { \n        type: 'king', \n        color: 'white', \n        hasMoved: false  // Crucial for castling\n      };\n      testBoard[7][7] = { \n        type: 'rook', \n        color: 'white', \n        hasMoved: false  // Crucial for castling\n      };\n      // Clear the castling path\n      testBoard[7][5] = null;\n      testBoard[7][6] = null;\n    });\n\n    it('should detect en passant moves', () => {\n      testBoard = Array(8).fill().map(() => Array(8).fill(null));\n      const move = {\n        piece: { type: 'pawn', color: 'black' },\n        from: { row: 1, col: 3 },\n        to: { row: 3, col: 3 }\n      };\n      expect(isEnPassantMove(move)).to.be.false; // Should only be true in specific context\n    });\n\n  //   it('should execute castling correctly', () => {\n  //   const king = testBoard[7][4];\n  //   const castleMove = {\n  //     from: { row: 7, col: 4 },\n  //     to: { row: 7, col: 6 },\n  //     piece: king,\n  //     castle: 'kingside'\n  //   };\n\n  //   performCastle(castleMove);\n\n  //   // Verify king moved\n  //   expect(testBoard[7][6]).to.deep.equal({\n  //     type: 'king',\n  //     color: 'white',\n  //     hasMoved: true\n  //   });\n    \n  //   // Verify rook moved\n  //   expect(testBoard[7][5]).to.deep.equal({\n  //     type: 'rook',\n  //     color: 'white',\n  //     hasMoved: true\n  //   });\n    \n  //   // Verify original positions are empty\n  //   expect(testBoard[7][4]).to.be.null;\n  //   expect(testBoard[7][7]).to.be.null;\n  // });\n});\n});"],"mappings":"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","ignoreList":[]}},"mtime":1743349903602},"{\"assumptions\":{},\"sourceRoot\":\"/home/bayern/Chess_Temp/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/bayern/Chess_Temp\",\"filename\":\"/home/bayern/Chess_Temp/gameController.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/bayern/Chess_Temp\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-duplicate-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regexp-modifiers\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$3\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$4\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$5\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$6\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$7\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$8\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$9\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$10\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$11\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$12\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$16\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"/home/bayern/Chess_Temp/node_modules/@babel/preset-env/lib/index.js$17\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.26.10:development":{"value":{"code":"\"use strict\";\n\n/* \n  Modified Chess Game with Prime Rook Moves, Menu, Chess Clock, and Advanced Rules:\n  - Friendly rooks can only move a prime number of squares (allowed: 2, 3, 5, or 7).\n  - Queen moves remain standard.\n  - All other rules (castling, en passant, pawn promotion, etc.) remain unchanged.\n*/\n\n/* ----- DOM ELEMENTS ----- */\nconst boardElement = document.getElementById(\"chessboard\");\nconst promotionModal = document.getElementById(\"promotionModal\");\nconst promotionChoices = document.querySelectorAll(\".promotionChoice\");\nconst startGameBtn = document.getElementById(\"startGame\");\nconst gameModeSelect = document.getElementById(\"gameMode\");\nconst whiteClockEl = document.getElementById(\"whiteClock\");\nconst blackClockEl = document.getElementById(\"blackClock\");\nconst menuScreen = document.getElementById(\"menuScreen\");\nconst gameScreen = document.getElementById(\"gameScreen\");\n\n/* ----- GAME STATE VARIABLES ----- */\nlet board = [];\nlet currentPlayer = \"white\";\nlet selectedPiece = null;\nlet selectedPos = null;\nlet moveHistory = [];\nlet boardHistory = [];\nlet fiftyMoveCounter = 0;\nlet enPassantTarget = null;\n\n/* ----- CLOCK VARIABLES ----- */\nlet whiteTime = 0;\nlet blackTime = 0;\nlet clockInterval = null;\n\n/* ----- DRAGGING STATE ----- */\nlet draggingPieceEl = null;\nlet dragOffset = {\n  x: 0,\n  y: 0\n};\nlet dragStartPos = null;\n\n/* ----- HELPER: Check if number is prime ----- */\nfunction isPrime(n) {\n  if (n < 2) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\n/* ----- CLOCK FUNCTIONS ----- */\nfunction startClock() {\n  clearInterval(clockInterval);\n  clockInterval = setInterval(() => {\n    if (currentPlayer === \"white\") {\n      whiteTime--;\n      if (whiteTime <= 0) {\n        clearInterval(clockInterval);\n        alert(\"Time's up! Black wins!\");\n        resetGame();\n        return;\n      }\n    } else {\n      blackTime--;\n      if (blackTime <= 0) {\n        clearInterval(clockInterval);\n        alert(\"Time's up! White wins!\");\n        resetGame();\n        return;\n      }\n    }\n    updateClockDisplay();\n  }, 1000);\n}\nfunction updateClockDisplay() {\n  whiteClockEl.innerText = formatTime(whiteTime);\n  blackClockEl.innerText = formatTime(blackTime);\n}\nfunction formatTime(seconds) {\n  let m = Math.floor(seconds / 60);\n  let s = seconds % 60;\n  return (m < 10 ? \"0\" + m : m) + \":\" + (s < 10 ? \"0\" + s : s);\n}\n\n/* ----- MENU AND GAME START ----- */\nstartGameBtn.addEventListener(\"click\", () => {\n  let initialTime = parseInt(gameModeSelect.value);\n  whiteTime = initialTime;\n  blackTime = initialTime;\n  updateClockDisplay();\n  menuScreen.style.display = \"none\";\n  gameScreen.style.display = \"block\";\n  initializeBoard();\n  startClock();\n});\n\n/* ----- INITIALIZATION ----- */\nfunction initializeBoard() {\n  board = Array(8).fill(null).map(() => Array(8).fill(null));\n  for (let i = 0; i < 8; i++) {\n    board[1][i] = createPiece(\"pawn\", \"black\");\n    board[6][i] = createPiece(\"pawn\", \"white\");\n  }\n  board[0][0] = createPiece(\"rook\", \"black\");\n  board[0][7] = createPiece(\"rook\", \"black\");\n  board[7][0] = createPiece(\"rook\", \"white\");\n  board[7][7] = createPiece(\"rook\", \"white\");\n  board[0][1] = createPiece(\"knight\", \"black\");\n  board[0][6] = createPiece(\"knight\", \"black\");\n  board[7][1] = createPiece(\"knight\", \"white\");\n  board[7][6] = createPiece(\"knight\", \"white\");\n  board[0][2] = createPiece(\"bishop\", \"black\");\n  board[0][5] = createPiece(\"bishop\", \"black\");\n  board[7][2] = createPiece(\"bishop\", \"white\");\n  board[7][5] = createPiece(\"bishop\", \"white\");\n  board[0][3] = createPiece(\"queen\", \"black\");\n  board[7][3] = createPiece(\"queen\", \"white\");\n  board[0][4] = createPiece(\"king\", \"black\");\n  board[7][4] = createPiece(\"king\", \"white\");\n  moveHistory = [];\n  boardHistory = [];\n  fiftyMoveCounter = 0;\n  enPassantTarget = null;\n  selectedPiece = null;\n  selectedPos = null;\n  currentPlayer = \"white\";\n  drawBoard();\n  updateBoardHistory();\n}\nfunction resetGame() {\n  clearInterval(clockInterval);\n  menuScreen.style.display = \"block\";\n  gameScreen.style.display = \"none\";\n  initializeBoard();\n}\n\n/* ----- PIECE CREATION ----- */\nfunction createPiece(type, color) {\n  return {\n    type,\n    color,\n    hasMoved: false\n  };\n}\n\n/* ----- DRAWING THE BOARD ----- */\nfunction drawBoard() {\n  boardElement.innerHTML = \"\";\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      let square = document.createElement(\"div\");\n      square.classList.add(\"square\");\n      square.dataset.row = row;\n      square.dataset.col = col;\n      square.classList.add((row + col) % 2 === 0 ? \"light\" : \"dark\");\n      if (selectedPos && selectedPos.row === row && selectedPos.col === col) {\n        square.classList.add(\"selected\");\n      }\n      if (board[row][col] && board[row][col].type === \"king\") {\n        if (isSquareAttacked(board, {\n          row,\n          col\n        }, getOpponent(board[row][col].color))) {\n          square.classList.add(\"in-check\");\n        }\n      }\n      if (board[row][col]) {\n        let pieceEl = document.createElement(\"img\");\n        pieceEl.classList.add(\"piece-img\", board[row][col].color, board[row][col].type);\n        pieceEl.src = getPieceImageSrc(board[row][col]);\n        pieceEl.alt = board[row][col].type;\n        pieceEl.addEventListener(\"mousedown\", onPieceMouseDown);\n        square.appendChild(pieceEl);\n      }\n      square.addEventListener(\"click\", onSquareClick);\n      boardElement.appendChild(square);\n    }\n  }\n}\nfunction getPieceImageSrc(piece) {\n  return `assets/${piece.color}_${piece.type}.png`;\n}\n\n/* ----- CLICK HANDLING ----- */\nfunction onSquareClick(e) {\n  if (draggingPieceEl) return;\n  const row = parseInt(e.currentTarget.dataset.row);\n  const col = parseInt(e.currentTarget.dataset.col);\n  if (board[row][col] && board[row][col].color === currentPlayer) {\n    selectedPiece = board[row][col];\n    selectedPos = {\n      row,\n      col\n    };\n  } else if (selectedPiece) {\n    let move = {\n      from: {\n        row: selectedPos.row,\n        col: selectedPos.col\n      },\n      to: {\n        row,\n        col\n      },\n      piece: selectedPiece\n    };\n    if (isLegalMove(board, move, currentPlayer)) {\n      makeMove(move);\n    } else {\n      console.log(\"Illegal move attempted:\", move);\n    }\n    selectedPiece = null;\n    selectedPos = null;\n  }\n  drawBoard();\n}\n\n/* ----- DRAG-TO-MOVE HANDLING ----- */\nfunction onPieceMouseDown(e) {\n  const square = e.target.parentElement;\n  const row = parseInt(square.dataset.row);\n  const col = parseInt(square.dataset.col);\n  if (board[row][col].color !== currentPlayer) return;\n  selectedPiece = board[row][col];\n  selectedPos = {\n    row,\n    col\n  };\n  dragStartPos = {\n    row,\n    col\n  };\n  draggingPieceEl = e.target.cloneNode(true);\n  draggingPieceEl.classList.add(\"dragging\");\n  document.body.appendChild(draggingPieceEl);\n  const rect = e.target.getBoundingClientRect();\n  dragOffset.x = e.clientX - rect.left;\n  dragOffset.y = e.clientY - rect.top;\n  drawBoard();\n  document.addEventListener(\"mousemove\", onMouseMove);\n  document.addEventListener(\"mouseup\", onMouseUp);\n}\nfunction onMouseMove(e) {\n  if (draggingPieceEl) {\n    draggingPieceEl.style.left = e.clientX - dragOffset.x + \"px\";\n    draggingPieceEl.style.top = e.clientY - dragOffset.y + \"px\";\n  }\n}\nfunction onMouseUp(e) {\n  if (!draggingPieceEl) return;\n  const boardRect = boardElement.getBoundingClientRect();\n  const x = e.clientX - boardRect.left;\n  const y = e.clientY - boardRect.top;\n  const col = Math.floor(x / 80);\n  const row = Math.floor(y / 80);\n  if (row >= 0 && row < 8 && col >= 0 && col < 8) {\n    let move = {\n      from: {\n        row: dragStartPos.row,\n        col: dragStartPos.col\n      },\n      to: {\n        row,\n        col\n      },\n      piece: selectedPiece\n    };\n    // Detect castling: if king moves two squares horizontally\n    if (move.piece.type === \"king\" && Math.abs(move.to.col - move.from.col) === 2) {\n      move.castle = move.to.col > move.from.col ? \"kingside\" : \"queenside\";\n    }\n    if (isLegalMove(board, move, currentPlayer)) {\n      makeMove(move);\n    } else {\n      console.log(\"Illegal move attempted via drag:\", move);\n    }\n  }\n  document.body.removeChild(draggingPieceEl);\n  draggingPieceEl = null;\n  dragStartPos = null;\n  selectedPiece = null;\n  selectedPos = null;\n  document.removeEventListener(\"mousemove\", onMouseMove);\n  document.removeEventListener(\"mouseup\", onMouseUp);\n  drawBoard();\n}\n\n/* ----- MAKING MOVES ----- */\nfunction makeMove(move) {\n  if (isCastlingMove(move)) {\n    performCastle(move);\n  } else if (isEnPassantMove(move)) {\n    performEnPassant(move);\n  } else {\n    board[move.to.row][move.to.col] = move.piece;\n    board[move.from.row][move.from.col] = null;\n    if (move.piece.type === \"pawn\" && isLastRank(move.to, move.piece.color)) {\n      showPromotionModal(move);\n      return;\n    }\n  }\n  move.piece.hasMoved = true;\n  handlePawnDoubleStep(move);\n  moveHistory.push(move);\n  updateFiftyMoveCounter(move);\n  updateBoardHistory();\n\n  // Switch turn. currentPlayer becomes the player who is about to move.\n  currentPlayer = getOpponent(currentPlayer);\n  startClock();\n\n  // FIXED: Check for checkmate on the current player's turn\n  if (checkForCheckmate(board, currentPlayer)) {\n    alert(\"Checkmate! \" + getOpponent(currentPlayer) + \" wins.\");\n    clearInterval(clockInterval);\n    resetGame();\n    return;\n  } else if (checkForStalemate(board, currentPlayer)) {\n    alert(\"Stalemate!\");\n    clearInterval(clockInterval);\n    resetGame();\n    return;\n  } else if (isThreefoldRepetition()) {\n    alert(\"Draw by threefold repetition!\");\n    clearInterval(clockInterval);\n    resetGame();\n    return;\n  } else if (isFiftyMoveRule()) {\n    alert(\"Draw by fifty-move rule!\");\n    clearInterval(clockInterval);\n    resetGame();\n    return;\n  }\n  selectedPiece = null;\n  selectedPos = null;\n  drawBoard();\n}\n\n/* ----- MOVE GENERATION ----- */\nfunction generateMovesForPiece(board, pos) {\n  let piece = board[pos.row][pos.col];\n  if (!piece) return [];\n  let moves = [];\n  switch (piece.type) {\n    case \"pawn\":\n      moves = generatePawnMoves(board, pos, piece);\n      break;\n    case \"rook\":\n      // Friendly rooks: restrict moves to prime number of squares.\n      moves = generateRookMoves(board, pos, piece);\n      break;\n    case \"knight\":\n      moves = generateKnightMoves(board, pos, piece);\n      break;\n    case \"bishop\":\n      moves = generateBishopMoves(board, pos, piece);\n      break;\n    case \"queen\":\n      // For queen, use default rook moves (no prime restriction) plus bishop moves.\n      moves = generateRookMovesDefault(board, pos, piece).concat(generateBishopMoves(board, pos, piece));\n      break;\n    case \"king\":\n      moves = generateKingMoves(board, pos, piece);\n      moves = moves.concat(generateCastlingMoves(board, pos, piece));\n      break;\n  }\n  return moves;\n}\nfunction generatePawnMoves(board, pos, piece) {\n  let moves = [];\n  let direction = piece.color === \"white\" ? -1 : 1;\n  let startRow = piece.color === \"white\" ? 6 : 1;\n  let nextRow = pos.row + direction;\n  if (isInBounds(nextRow, pos.col) && board[nextRow][pos.col] === null) {\n    moves.push({\n      from: pos,\n      to: {\n        row: nextRow,\n        col: pos.col\n      },\n      piece\n    });\n    if (pos.row === startRow && isInBounds(nextRow + direction, pos.col) && board[nextRow + direction][pos.col] === null) {\n      moves.push({\n        from: pos,\n        to: {\n          row: nextRow + direction,\n          col: pos.col\n        },\n        piece\n      });\n    }\n  }\n  for (let dc of [-1, 1]) {\n    let newCol = pos.col + dc;\n    if (isInBounds(nextRow, newCol)) {\n      if (board[nextRow][newCol] && board[nextRow][newCol].color !== piece.color) {\n        moves.push({\n          from: pos,\n          to: {\n            row: nextRow,\n            col: newCol\n          },\n          piece\n        });\n      }\n      if (board[nextRow][newCol] === null && enPassantTarget && enPassantTarget.row === nextRow && enPassantTarget.col === newCol) {\n        moves.push({\n          from: pos,\n          to: {\n            row: nextRow,\n            col: newCol\n          },\n          piece,\n          enPassant: true\n        });\n      }\n    }\n  }\n  return moves;\n}\n\n/* Modified Rook Moves: For friendly rooks, allow moves only if the number of squares moved is prime (2, 3, 5, or 7) */\nfunction generateRookMoves(board, pos, piece) {\n  let moves = [];\n  let directions = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n  directions.forEach(d => {\n    let r = pos.row;\n    let c = pos.col;\n    let steps = 0;\n    while (true) {\n      r += d[0];\n      c += d[1];\n      steps++;\n      if (!isInBounds(r, c)) break;\n      if (isPrime(steps)) {\n        if (board[r][c] === null) {\n          moves.push({\n            from: pos,\n            to: {\n              row: r,\n              col: c\n            },\n            piece\n          });\n        } else {\n          if (board[r][c].color !== piece.color) {\n            moves.push({\n              from: pos,\n              to: {\n                row: r,\n                col: c\n              },\n              piece\n            });\n          }\n          break;\n        }\n      } else {\n        if (board[r][c] !== null) break;\n      }\n    }\n  });\n  return moves;\n}\n\n/* Default Rook Moves for queen moves and enemy attack detection (no prime restriction) */\nfunction generateRookMovesDefault(board, pos, piece) {\n  let moves = [];\n  let directions = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n  directions.forEach(d => {\n    let r = pos.row;\n    let c = pos.col;\n    while (true) {\n      r += d[0];\n      c += d[1];\n      if (!isInBounds(r, c)) break;\n      if (board[r][c] === null) {\n        moves.push({\n          from: pos,\n          to: {\n            row: r,\n            col: c\n          },\n          piece\n        });\n      } else {\n        moves.push({\n          from: pos,\n          to: {\n            row: r,\n            col: c\n          },\n          piece\n        });\n        break;\n      }\n    }\n  });\n  return moves;\n}\nfunction generateKnightMoves(board, pos, piece) {\n  let moves = [];\n  let offsets = [[-2, -1], [-2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2], [2, -1], [2, 1]];\n  offsets.forEach(o => {\n    let r = pos.row + o[0];\n    let c = pos.col + o[1];\n    if (isInBounds(r, c) && (!board[r][c] || board[r][c].color !== piece.color)) {\n      moves.push({\n        from: pos,\n        to: {\n          row: r,\n          col: c\n        },\n        piece\n      });\n    }\n  });\n  return moves;\n}\nfunction generateBishopMoves(board, pos, piece) {\n  let moves = [];\n  let directions = [[1, 1], [1, -1], [-1, 1], [-1, -1]];\n  directions.forEach(d => {\n    for (let steps = 1; steps < 8; steps++) {\n      let r = pos.row + d[0] * steps;\n      let c = pos.col + d[1] * steps;\n      if (!isInBounds(r, c)) break;\n\n      // Skip if destination is occupied by a friendly piece\n      let destSquare = board[r][c];\n      if (destSquare && destSquare.color === piece.color) continue;\n      let standardPathValid = true;\n      let modifiedPawnCount = 0;\n      let modifiedPathValid = true;\n\n      // Check standard path validity (all intermediate squares empty)\n      for (let s = 1; s < steps; s++) {\n        let currentR = pos.row + d[0] * s;\n        let currentC = pos.col + d[1] * s;\n        if (board[currentR][currentC] !== null) {\n          standardPathValid = false;\n          break;\n        }\n      }\n\n      // Check modified path validity (exactly one pawn in intermediate squares)\n      for (let s = 1; s < steps; s++) {\n        let currentR = pos.row + d[0] * s;\n        let currentC = pos.col + d[1] * s;\n        let square = board[currentR][currentC];\n        if (square) {\n          if (square.type === 'pawn') {\n            modifiedPawnCount++;\n            if (modifiedPawnCount > 1) {\n              modifiedPathValid = false;\n              break;\n            }\n          } else {\n            modifiedPathValid = false;\n            break;\n          }\n        }\n      }\n      modifiedPathValid = modifiedPathValid && modifiedPawnCount === 1;\n\n      // Add move if either path is valid\n      if (standardPathValid || modifiedPathValid) {\n        moves.push({\n          from: pos,\n          to: {\n            row: r,\n            col: c\n          },\n          piece\n        });\n      }\n    }\n  });\n  return moves;\n}\nfunction generateQueenMoves(board, pos, piece) {\n  // Queen moves = default rook moves (no prime restriction) + bishop moves\n  return generateRookMovesDefault(board, pos, piece).concat(generateBishopMoves(board, pos, piece));\n}\nfunction generateKingMoves(board, pos, piece) {\n  let moves = [];\n  for (let r = pos.row - 1; r <= pos.row + 1; r++) {\n    for (let c = pos.col - 1; c <= pos.col + 1; c++) {\n      if (r === pos.row && c === pos.col) continue;\n      if (isInBounds(r, c) && (!board[r][c] || board[r][c].color !== piece.color)) {\n        moves.push({\n          from: pos,\n          to: {\n            row: r,\n            col: c\n          },\n          piece\n        });\n      }\n    }\n  }\n  return moves;\n}\nfunction generateCastlingMoves(board, pos, king) {\n  let moves = [];\n  if (king.hasMoved) return moves;\n  if (canCastle(board, king, {\n    side: \"kingside\",\n    pos\n  })) {\n    moves.push({\n      from: pos,\n      to: {\n        row: pos.row,\n        col: pos.col + 2\n      },\n      piece: king,\n      castle: \"kingside\"\n    });\n  }\n  if (canCastle(board, king, {\n    side: \"queenside\",\n    pos\n  })) {\n    moves.push({\n      from: pos,\n      to: {\n        row: pos.row,\n        col: pos.col - 2\n      },\n      piece: king,\n      castle: \"queenside\"\n    });\n  }\n  return moves;\n}\n\n/* ----- CASTLING LOGIC ----- */\nfunction canCastle(board, king, {\n  side,\n  pos\n}) {\n  let row = pos.row;\n  if (king.hasMoved) return false;\n  if (side === \"kingside\") {\n    let rook = board[row][7];\n    if (!rook || rook.type !== \"rook\" || rook.hasMoved) return false;\n    if (board[row][5] !== null || board[row][6] !== null) return false;\n    if (!isSquareSafeForKing(board, {\n      row,\n      col: 4\n    }, king.color) || !isSquareSafeForKing(board, {\n      row,\n      col: 5\n    }, king.color) || !isSquareSafeForKing(board, {\n      row,\n      col: 6\n    }, king.color)) return false;\n    return true;\n  } else if (side === \"queenside\") {\n    let rook = board[row][0];\n    if (!rook || rook.type !== \"rook\" || rook.hasMoved) return false;\n    if (board[row][1] !== null || board[row][2] !== null || board[row][3] !== null) return false;\n    if (!isSquareSafeForKing(board, {\n      row,\n      col: 4\n    }, king.color) || !isSquareSafeForKing(board, {\n      row,\n      col: 3\n    }, king.color) || !isSquareSafeForKing(board, {\n      row,\n      col: 2\n    }, king.color)) return false;\n    return true;\n  }\n  return false;\n}\nfunction isSquareSafeForKing(board, pos, color) {\n  let tempBoard = cloneBoard(board);\n  tempBoard[pos.row][pos.col] = {\n    type: \"king\",\n    color,\n    hasMoved: true\n  };\n  return isKingSafe(tempBoard, color);\n}\n\n/* ----- HELPER FUNCTIONS ----- */\nfunction isInBounds(row, col) {\n  return row >= 0 && row < 8 && col >= 0 && col < 8;\n}\nfunction cloneBoard(board) {\n  return board.map(row => row.map(cell => cell ? {\n    ...cell\n  } : null));\n}\nfunction isKingSafe(board, color) {\n  let kingPos = findKing(board, color);\n  if (!kingPos) return false;\n  return !isSquareAttacked(board, kingPos, getOpponent(color));\n}\nfunction findKing(board, color) {\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      let piece = board[r][c];\n      if (piece && piece.type === \"king\" && piece.color === color) {\n        return {\n          row: r,\n          col: c\n        };\n      }\n    }\n  }\n  return null;\n}\nfunction isSquareAttacked(board, pos, attackerColor) {\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      let piece = board[r][c];\n      if (piece && piece.color === attackerColor) {\n        let moves;\n        if (piece.type === \"rook\") {\n          // For enemy rooks, use full-range moves (default) for attack detection.\n          moves = generateRookMovesDefault(board, {\n            row: r,\n            col: c\n          }, piece);\n        } else {\n          moves = generateMovesForPiece(board, {\n            row: r,\n            col: c\n          });\n        }\n        for (let move of moves) {\n          if (move.to.row === pos.row && move.to.col === pos.col) return true;\n        }\n      }\n    }\n  }\n  return false;\n}\nfunction getOpponent(color) {\n  return color === \"white\" ? \"black\" : \"white\";\n}\n\n/* ----- EN PASSANT LOGIC ----- */\nfunction handlePawnDoubleStep(move) {\n  if (move.piece.type === \"pawn\" && Math.abs(move.from.row - move.to.row) === 2) {\n    enPassantTarget = {\n      row: (move.from.row + move.to.row) / 2,\n      col: move.from.col\n    };\n  } else {\n    enPassantTarget = null;\n  }\n}\nfunction isEnPassantMove(move) {\n  return move.piece.type === \"pawn\" && move.from.col !== move.to.col && board[move.to.row][move.to.col] === null;\n}\nfunction performEnPassant(move) {\n  board[move.to.row][move.to.col] = move.piece;\n  board[move.from.row][move.from.col] = null;\n  let captureRow = move.piece.color === \"white\" ? move.to.row + 1 : move.to.row - 1;\n  board[captureRow][move.to.col] = null;\n}\n\n/* ----- CASTLING HANDLING ----- */\nfunction isCastlingMove(move) {\n  return move.piece.type === \"king\" && Math.abs(move.to.col - move.from.col) === 2;\n}\nfunction performCastle(move) {\n  let row = move.from.row;\n  if (move.castle === \"kingside\") {\n    board[row][6] = move.piece;\n    board[row][4] = null;\n    let rook = board[row][7];\n    board[row][5] = rook;\n    board[row][7] = null;\n    rook.hasMoved = true;\n  } else if (move.castle === \"queenside\") {\n    board[row][2] = move.piece;\n    board[row][4] = null;\n    let rook = board[row][0];\n    board[row][3] = rook;\n    board[row][0] = null;\n    rook.hasMoved = true;\n  }\n}\n\n/* ----- PAWN PROMOTION ----- */\nfunction isLastRank(pos, color) {\n  return color === \"white\" && pos.row === 0 || color === \"black\" && pos.row === 7;\n}\nfunction showPromotionModal(move) {\n  promotionModal.style.display = \"block\";\n  promotionModal.dataset.fromRow = move.from.row;\n  promotionModal.dataset.fromCol = move.from.col;\n  promotionModal.dataset.toRow = move.to.row;\n  promotionModal.dataset.toCol = move.to.col;\n  promotionModal.dataset.color = move.piece.color;\n  promotionModal.dataset.pieceType = move.piece.type;\n}\npromotionChoices.forEach(choice => {\n  choice.addEventListener(\"click\", function () {\n    let selectedType = this.dataset.type;\n    let move = {\n      from: {\n        row: parseInt(promotionModal.dataset.fromRow),\n        col: parseInt(promotionModal.dataset.fromCol)\n      },\n      to: {\n        row: parseInt(promotionModal.dataset.toRow),\n        col: parseInt(promotionModal.dataset.toCol)\n      },\n      piece: {\n        type: promotionModal.dataset.pieceType,\n        color: promotionModal.dataset.color\n      }\n    };\n    board[move.to.row][move.to.col] = createPiece(selectedType, move.piece.color);\n    board[move.from.row][move.from.col] = null;\n    promotionModal.style.display = \"none\";\n    board[move.to.row][move.to.col].hasMoved = true;\n    moveHistory.push(move);\n    updateFiftyMoveCounter(move);\n    updateBoardHistory();\n    if (checkForCheckmate(board, getOpponent(currentPlayer))) {\n      alert(\"Checkmate! \" + getOpponent(currentPlayer) + \" wins.\");\n      clearInterval(clockInterval);\n      resetGame();\n      return;\n    } else if (checkForStalemate(board, getOpponent(currentPlayer))) {\n      alert(\"Stalemate!\");\n      clearInterval(clockInterval);\n      resetGame();\n      return;\n    }\n    currentPlayer = getOpponent(currentPlayer);\n    startClock();\n    selectedPiece = null;\n    selectedPos = null;\n    drawBoard();\n  });\n});\n\n/* ----- BOARD HISTORY & DRAWING RULES ----- */\nfunction serializeBoard(board) {\n  return board.map(row => row.map(cell => cell ? cell.type[0] + cell.color[0] : \"  \").join(\"\")).join(\"|\");\n}\nfunction updateBoardHistory() {\n  boardHistory.push(serializeBoard(board));\n}\nfunction isThreefoldRepetition() {\n  let counts = {};\n  boardHistory.forEach(state => {\n    counts[state] = (counts[state] || 0) + 1;\n  });\n  return Object.values(counts).some(count => count >= 3);\n}\nfunction updateFiftyMoveCounter(move) {\n  if (move.piece.type === \"pawn\" || board[move.to.row][move.to.col] !== null) {\n    fiftyMoveCounter = 0;\n  } else {\n    fiftyMoveCounter++;\n  }\n}\nfunction isFiftyMoveRule() {\n  return fiftyMoveCounter >= 50;\n}\n\n/* ----- CHECKMATE & STALEMATE ----- */\n// Checkmate: the current player's king is in check and has no legal moves.\nfunction checkForCheckmate(board, color) {\n  if (!isKingSafe(board, color)) {\n    let moves = generateAllMoves(board, color);\n    let legalMoves = moves.filter(m => isLegalMove(board, m, color));\n    if (legalMoves.length === 0) {\n      console.log(\"Checkmate detected for\", color);\n      return true;\n    }\n  }\n  return false;\n}\nfunction checkForStalemate(board, color) {\n  if (isKingSafe(board, color)) {\n    let moves = generateAllMoves(board, color);\n    let legalMoves = moves.filter(m => isLegalMove(board, m, color));\n    if (legalMoves.length === 0) return true;\n  }\n  return false;\n}\nfunction generateAllMoves(board, color) {\n  let moves = [];\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      let piece = board[r][c];\n      if (piece && piece.color === color) {\n        moves = moves.concat(generateMovesForPiece(board, {\n          row: r,\n          col: c\n        }));\n      }\n    }\n  }\n  return moves;\n}\n\n/* ----- MOVE VALIDATION ----- */\nfunction isLegalMove(board, move, color) {\n  let moves = generateMovesForPiece(board, move.from);\n  let legal = moves.some(m => m.to.row === move.to.row && m.to.col === move.to.col);\n  if (!legal) {\n    console.log(\"Move not in generated moves:\", move);\n    return false;\n  }\n  let newBoard = cloneBoard(board);\n  newBoard[move.to.row][move.to.col] = newBoard[move.from.row][move.from.col];\n  newBoard[move.from.row][move.from.col] = null;\n  let kingPos = findKing(newBoard, color);\n  if (!kingPos) {\n    console.log(\"King not found after move:\", move);\n    return false;\n  }\n  if (!isKingSafe(newBoard, color)) {\n    console.log(\"King would be in check after move:\", move, \"King at:\", kingPos);\n    return false;\n  }\n  return true;\n}\n\n/* ----- END GAME INITIALIZATION ----- */\n// Only initialize if running in browser\nif (typeof process === 'undefined' || !process.env.NODE_ENV === 'test') {\n  initializeBoard();\n}\n\n// Export for Jest testing while maintaining browser compatibility\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = {\n    isPrime,\n    generateRookMoves,\n    generatePawnMoves,\n    isLegalMove,\n    initializeBoard,\n    checkForCheckmate,\n    isSquareAttacked,\n    serializeBoard,\n    cloneBoard,\n    getOpponent,\n    performCastle,\n    canCastle,\n    isEnPassantMove,\n    generateMovesForPiece,\n    isInBounds,\n    isKingSafe,\n    createPiece,\n    enPassantTarget\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["boardElement","document","getElementById","promotionModal","promotionChoices","querySelectorAll","startGameBtn","gameModeSelect","whiteClockEl","blackClockEl","menuScreen","gameScreen","board","currentPlayer","selectedPiece","selectedPos","moveHistory","boardHistory","fiftyMoveCounter","enPassantTarget","whiteTime","blackTime","clockInterval","draggingPieceEl","dragOffset","x","y","dragStartPos","isPrime","n","i","Math","sqrt","startClock","clearInterval","setInterval","alert","resetGame","updateClockDisplay","innerText","formatTime","seconds","m","floor","s","addEventListener","initialTime","parseInt","value","style","display","initializeBoard","Array","fill","map","createPiece","drawBoard","updateBoardHistory","type","color","hasMoved","innerHTML","row","col","square","createElement","classList","add","dataset","isSquareAttacked","getOpponent","pieceEl","src","getPieceImageSrc","alt","onPieceMouseDown","appendChild","onSquareClick","piece","e","currentTarget","move","from","to","isLegalMove","makeMove","console","log","target","parentElement","cloneNode","body","rect","getBoundingClientRect","clientX","left","clientY","top","onMouseMove","onMouseUp","boardRect","abs","castle","removeChild","removeEventListener","isCastlingMove","performCastle","isEnPassantMove","performEnPassant","isLastRank","showPromotionModal","handlePawnDoubleStep","push","updateFiftyMoveCounter","checkForCheckmate","checkForStalemate","isThreefoldRepetition","isFiftyMoveRule","generateMovesForPiece","pos","moves","generatePawnMoves","generateRookMoves","generateKnightMoves","generateBishopMoves","generateRookMovesDefault","concat","generateKingMoves","generateCastlingMoves","direction","startRow","nextRow","isInBounds","dc","newCol","enPassant","directions","forEach","d","r","c","steps","offsets","o","destSquare","standardPathValid","modifiedPawnCount","modifiedPathValid","currentR","currentC","generateQueenMoves","king","canCastle","side","rook","isSquareSafeForKing","tempBoard","cloneBoard","isKingSafe","cell","kingPos","findKing","attackerColor","captureRow","fromRow","fromCol","toRow","toCol","pieceType","choice","selectedType","serializeBoard","join","counts","state","Object","values","some","count","generateAllMoves","legalMoves","filter","length","legal","newBoard","process","env","NODE_ENV","module","exports"],"sourceRoot":"/home/bayern/Chess_Temp/","sources":["gameController.js"],"sourcesContent":["/* \n  Modified Chess Game with Prime Rook Moves, Menu, Chess Clock, and Advanced Rules:\n  - Friendly rooks can only move a prime number of squares (allowed: 2, 3, 5, or 7).\n  - Queen moves remain standard.\n  - All other rules (castling, en passant, pawn promotion, etc.) remain unchanged.\n*/\n\n/* ----- DOM ELEMENTS ----- */\nconst boardElement = document.getElementById(\"chessboard\");\nconst promotionModal = document.getElementById(\"promotionModal\");\nconst promotionChoices = document.querySelectorAll(\".promotionChoice\");\nconst startGameBtn = document.getElementById(\"startGame\");\nconst gameModeSelect = document.getElementById(\"gameMode\");\nconst whiteClockEl = document.getElementById(\"whiteClock\");\nconst blackClockEl = document.getElementById(\"blackClock\");\nconst menuScreen = document.getElementById(\"menuScreen\");\nconst gameScreen = document.getElementById(\"gameScreen\");\n\n/* ----- GAME STATE VARIABLES ----- */\nlet board = [];\nlet currentPlayer = \"white\";\nlet selectedPiece = null;\nlet selectedPos = null;\nlet moveHistory = [];\nlet boardHistory = [];\nlet fiftyMoveCounter = 0;\nlet enPassantTarget = null;\n\n/* ----- CLOCK VARIABLES ----- */\nlet whiteTime = 0;\nlet blackTime = 0;\nlet clockInterval = null;\n\n/* ----- DRAGGING STATE ----- */\nlet draggingPieceEl = null;\nlet dragOffset = { x: 0, y: 0 };\nlet dragStartPos = null;\n\n/* ----- HELPER: Check if number is prime ----- */\nfunction isPrime(n) {\n  if (n < 2) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\n/* ----- CLOCK FUNCTIONS ----- */\nfunction startClock() {\n  clearInterval(clockInterval);\n  clockInterval = setInterval(() => {\n    if (currentPlayer === \"white\") {\n      whiteTime--;\n      if (whiteTime <= 0) {\n        clearInterval(clockInterval);\n        alert(\"Time's up! Black wins!\");\n        resetGame();\n        return;\n      }\n    } else {\n      blackTime--;\n      if (blackTime <= 0) {\n        clearInterval(clockInterval);\n        alert(\"Time's up! White wins!\");\n        resetGame();\n        return;\n      }\n    }\n    updateClockDisplay();\n  }, 1000);\n}\n\nfunction updateClockDisplay() {\n  whiteClockEl.innerText = formatTime(whiteTime);\n  blackClockEl.innerText = formatTime(blackTime);\n}\n\nfunction formatTime(seconds) {\n  let m = Math.floor(seconds / 60);\n  let s = seconds % 60;\n  return (m < 10 ? \"0\" + m : m) + \":\" + (s < 10 ? \"0\" + s : s);\n}\n\n/* ----- MENU AND GAME START ----- */\nstartGameBtn.addEventListener(\"click\", () => {\n  let initialTime = parseInt(gameModeSelect.value);\n  whiteTime = initialTime;\n  blackTime = initialTime;\n  updateClockDisplay();\n  menuScreen.style.display = \"none\";\n  gameScreen.style.display = \"block\";\n  initializeBoard();\n  startClock();\n});\n\n/* ----- INITIALIZATION ----- */\nfunction initializeBoard() {\n  board = Array(8)\n    .fill(null)\n    .map(() => Array(8).fill(null));\n  for (let i = 0; i < 8; i++) {\n    board[1][i] = createPiece(\"pawn\", \"black\");\n    board[6][i] = createPiece(\"pawn\", \"white\");\n  }\n  board[0][0] = createPiece(\"rook\", \"black\");\n  board[0][7] = createPiece(\"rook\", \"black\");\n  board[7][0] = createPiece(\"rook\", \"white\");\n  board[7][7] = createPiece(\"rook\", \"white\");\n  board[0][1] = createPiece(\"knight\", \"black\");\n  board[0][6] = createPiece(\"knight\", \"black\");\n  board[7][1] = createPiece(\"knight\", \"white\");\n  board[7][6] = createPiece(\"knight\", \"white\");\n  board[0][2] = createPiece(\"bishop\", \"black\");\n  board[0][5] = createPiece(\"bishop\", \"black\");\n  board[7][2] = createPiece(\"bishop\", \"white\");\n  board[7][5] = createPiece(\"bishop\", \"white\");\n  board[0][3] = createPiece(\"queen\", \"black\");\n  board[7][3] = createPiece(\"queen\", \"white\");\n  board[0][4] = createPiece(\"king\", \"black\");\n  board[7][4] = createPiece(\"king\", \"white\");\n\n  moveHistory = [];\n  boardHistory = [];\n  fiftyMoveCounter = 0;\n  enPassantTarget = null;\n  selectedPiece = null;\n  selectedPos = null;\n  currentPlayer = \"white\";\n\n  drawBoard();\n  updateBoardHistory();\n}\n\nfunction resetGame() {\n  clearInterval(clockInterval);\n  menuScreen.style.display = \"block\";\n  gameScreen.style.display = \"none\";\n  initializeBoard();\n}\n\n/* ----- PIECE CREATION ----- */\nfunction createPiece(type, color) {\n  return { type, color, hasMoved: false };\n}\n\n/* ----- DRAWING THE BOARD ----- */\nfunction drawBoard() {\n  boardElement.innerHTML = \"\";\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      let square = document.createElement(\"div\");\n      square.classList.add(\"square\");\n      square.dataset.row = row;\n      square.dataset.col = col;\n      square.classList.add((row + col) % 2 === 0 ? \"light\" : \"dark\");\n\n      if (selectedPos && selectedPos.row === row && selectedPos.col === col) {\n        square.classList.add(\"selected\");\n      }\n\n      if (board[row][col] && board[row][col].type === \"king\") {\n        if (isSquareAttacked(board, { row, col }, getOpponent(board[row][col].color))) {\n          square.classList.add(\"in-check\");\n        }\n      }\n\n      if (board[row][col]) {\n        let pieceEl = document.createElement(\"img\");\n        pieceEl.classList.add(\"piece-img\", board[row][col].color, board[row][col].type);\n        pieceEl.src = getPieceImageSrc(board[row][col]);\n        pieceEl.alt = board[row][col].type;\n        pieceEl.addEventListener(\"mousedown\", onPieceMouseDown);\n        square.appendChild(pieceEl);\n      }\n      square.addEventListener(\"click\", onSquareClick);\n      boardElement.appendChild(square);\n    }\n  }\n}\n\nfunction getPieceImageSrc(piece) {\n  return `assets/${piece.color}_${piece.type}.png`;\n}\n\n/* ----- CLICK HANDLING ----- */\nfunction onSquareClick(e) {\n  if (draggingPieceEl) return;\n\n  const row = parseInt(e.currentTarget.dataset.row);\n  const col = parseInt(e.currentTarget.dataset.col);\n\n  if (board[row][col] && board[row][col].color === currentPlayer) {\n    selectedPiece = board[row][col];\n    selectedPos = { row, col };\n  } else if (selectedPiece) {\n    let move = {\n      from: { row: selectedPos.row, col: selectedPos.col },\n      to: { row, col },\n      piece: selectedPiece,\n    };\n    if (isLegalMove(board, move, currentPlayer)) {\n      makeMove(move);\n    } else {\n      console.log(\"Illegal move attempted:\", move);\n    }\n    selectedPiece = null;\n    selectedPos = null;\n  }\n  drawBoard();\n}\n\n/* ----- DRAG-TO-MOVE HANDLING ----- */\nfunction onPieceMouseDown(e) {\n  const square = e.target.parentElement;\n  const row = parseInt(square.dataset.row);\n  const col = parseInt(square.dataset.col);\n\n  if (board[row][col].color !== currentPlayer) return;\n\n  selectedPiece = board[row][col];\n  selectedPos = { row, col };\n  dragStartPos = { row, col };\n\n  draggingPieceEl = e.target.cloneNode(true);\n  draggingPieceEl.classList.add(\"dragging\");\n  document.body.appendChild(draggingPieceEl);\n\n  const rect = e.target.getBoundingClientRect();\n  dragOffset.x = e.clientX - rect.left;\n  dragOffset.y = e.clientY - rect.top;\n\n  drawBoard();\n\n  document.addEventListener(\"mousemove\", onMouseMove);\n  document.addEventListener(\"mouseup\", onMouseUp);\n}\n\nfunction onMouseMove(e) {\n  if (draggingPieceEl) {\n    draggingPieceEl.style.left = e.clientX - dragOffset.x + \"px\";\n    draggingPieceEl.style.top = e.clientY - dragOffset.y + \"px\";\n  }\n}\n\nfunction onMouseUp(e) {\n  if (!draggingPieceEl) return;\n\n  const boardRect = boardElement.getBoundingClientRect();\n  const x = e.clientX - boardRect.left;\n  const y = e.clientY - boardRect.top;\n  const col = Math.floor(x / 80);\n  const row = Math.floor(y / 80);\n\n  if (row >= 0 && row < 8 && col >= 0 && col < 8) {\n    let move = {\n      from: { row: dragStartPos.row, col: dragStartPos.col },\n      to: { row, col },\n      piece: selectedPiece,\n    };\n    // Detect castling: if king moves two squares horizontally\n    if (\n      move.piece.type === \"king\" &&\n      Math.abs(move.to.col - move.from.col) === 2\n    ) {\n      move.castle = move.to.col > move.from.col ? \"kingside\" : \"queenside\";\n    }\n    if (isLegalMove(board, move, currentPlayer)) {\n      makeMove(move);\n    } else {\n      console.log(\"Illegal move attempted via drag:\", move);\n    }\n  }\n\n  document.body.removeChild(draggingPieceEl);\n  draggingPieceEl = null;\n  dragStartPos = null;\n  selectedPiece = null;\n  selectedPos = null;\n  document.removeEventListener(\"mousemove\", onMouseMove);\n  document.removeEventListener(\"mouseup\", onMouseUp);\n  drawBoard();\n}\n\n/* ----- MAKING MOVES ----- */\nfunction makeMove(move) {\n  if (isCastlingMove(move)) {\n    performCastle(move);\n  } else if (isEnPassantMove(move)) {\n    performEnPassant(move);\n  } else {\n    board[move.to.row][move.to.col] = move.piece;\n    board[move.from.row][move.from.col] = null;\n    if (move.piece.type === \"pawn\" && isLastRank(move.to, move.piece.color)) {\n      showPromotionModal(move);\n      return;\n    }\n  }\n  move.piece.hasMoved = true;\n  handlePawnDoubleStep(move);\n  moveHistory.push(move);\n  updateFiftyMoveCounter(move);\n  updateBoardHistory();\n\n  // Switch turn. currentPlayer becomes the player who is about to move.\n  currentPlayer = getOpponent(currentPlayer);\n  startClock();\n\n  // FIXED: Check for checkmate on the current player's turn\n  if (checkForCheckmate(board, currentPlayer)) {\n    alert(\"Checkmate! \" + getOpponent(currentPlayer) + \" wins.\");\n    clearInterval(clockInterval);\n    resetGame();\n    return;\n  } else if (checkForStalemate(board, currentPlayer)) {\n    alert(\"Stalemate!\");\n    clearInterval(clockInterval);\n    resetGame();\n    return;\n  } else if (isThreefoldRepetition()) {\n    alert(\"Draw by threefold repetition!\");\n    clearInterval(clockInterval);\n    resetGame();\n    return;\n  } else if (isFiftyMoveRule()) {\n    alert(\"Draw by fifty-move rule!\");\n    clearInterval(clockInterval);\n    resetGame();\n    return;\n  }\n\n  selectedPiece = null;\n  selectedPos = null;\n  drawBoard();\n}\n\n/* ----- MOVE GENERATION ----- */\nfunction generateMovesForPiece(board, pos) {\n  let piece = board[pos.row][pos.col];\n  if (!piece) return [];\n  let moves = [];\n  switch (piece.type) {\n    case \"pawn\":\n      moves = generatePawnMoves(board, pos, piece);\n      break;\n    case \"rook\":\n      // Friendly rooks: restrict moves to prime number of squares.\n      moves = generateRookMoves(board, pos, piece);\n      break;\n    case \"knight\":\n      moves = generateKnightMoves(board, pos, piece);\n      break;\n    case \"bishop\":\n      moves = generateBishopMoves(board, pos, piece);\n      break;\n    case \"queen\":\n      // For queen, use default rook moves (no prime restriction) plus bishop moves.\n      moves = generateRookMovesDefault(board, pos, piece).concat(\n        generateBishopMoves(board, pos, piece)\n      );\n      break;\n    case \"king\":\n      moves = generateKingMoves(board, pos, piece);\n      moves = moves.concat(generateCastlingMoves(board, pos, piece));\n      break;\n  }\n  return moves;\n}\n\nfunction generatePawnMoves(board, pos, piece) {\n  let moves = [];\n  let direction = piece.color === \"white\" ? -1 : 1;\n  let startRow = piece.color === \"white\" ? 6 : 1;\n  let nextRow = pos.row + direction;\n  if (isInBounds(nextRow, pos.col) && board[nextRow][pos.col] === null) {\n    moves.push({ from: pos, to: { row: nextRow, col: pos.col }, piece });\n    if (\n      pos.row === startRow &&\n      isInBounds(nextRow + direction, pos.col) &&\n      board[nextRow + direction][pos.col] === null\n    ) {\n      moves.push({\n        from: pos,\n        to: { row: nextRow + direction, col: pos.col },\n        piece,\n      });\n    }\n  }\n  for (let dc of [-1, 1]) {\n    let newCol = pos.col + dc;\n    if (isInBounds(nextRow, newCol)) {\n      if (board[nextRow][newCol] && board[nextRow][newCol].color !== piece.color) {\n        moves.push({ from: pos, to: { row: nextRow, col: newCol }, piece });\n      }\n      if (\n        board[nextRow][newCol] === null &&\n        enPassantTarget &&\n        enPassantTarget.row === nextRow &&\n        enPassantTarget.col === newCol\n      ) {\n        moves.push({ from: pos, to: { row: nextRow, col: newCol }, piece, enPassant: true });\n      }\n    }\n  }\n  return moves;\n}\n\n/* Modified Rook Moves: For friendly rooks, allow moves only if the number of squares moved is prime (2, 3, 5, or 7) */\nfunction generateRookMoves(board, pos, piece) {\n  let moves = [];\n  let directions = [\n    [1, 0],\n    [-1, 0],\n    [0, 1],\n    [0, -1],\n  ];\n  directions.forEach((d) => {\n    let r = pos.row;\n    let c = pos.col;\n    let steps = 0;\n    while (true) {\n      r += d[0];\n      c += d[1];\n      steps++;\n      if (!isInBounds(r, c)) break;\n      if (isPrime(steps)) {\n        if (board[r][c] === null) {\n          moves.push({ from: pos, to: { row: r, col: c }, piece });\n        } else {\n          if (board[r][c].color !== piece.color) {\n            moves.push({ from: pos, to: { row: r, col: c }, piece });\n          }\n          break;\n        }\n      } else {\n        if (board[r][c] !== null) break;\n      }\n    }\n  });\n  return moves;\n}\n\n/* Default Rook Moves for queen moves and enemy attack detection (no prime restriction) */\nfunction generateRookMovesDefault(board, pos, piece) {\n  let moves = [];\n  let directions = [\n    [1, 0],\n    [-1, 0],\n    [0, 1],\n    [0, -1],\n  ];\n  directions.forEach((d) => {\n    let r = pos.row;\n    let c = pos.col;\n    while (true) {\n      r += d[0];\n      c += d[1];\n      if (!isInBounds(r, c)) break;\n      if (board[r][c] === null) {\n        moves.push({ from: pos, to: { row: r, col: c }, piece });\n      } else {\n        moves.push({ from: pos, to: { row: r, col: c }, piece });\n        break;\n      }\n    }\n  });\n  return moves;\n}\n\nfunction generateKnightMoves(board, pos, piece) {\n  let moves = [];\n  let offsets = [\n    [-2, -1],\n    [-2, 1],\n    [-1, -2],\n    [-1, 2],\n    [1, -2],\n    [1, 2],\n    [2, -1],\n    [2, 1],\n  ];\n  offsets.forEach((o) => {\n    let r = pos.row + o[0];\n    let c = pos.col + o[1];\n    if (isInBounds(r, c) && (!board[r][c] || board[r][c].color !== piece.color)) {\n      moves.push({ from: pos, to: { row: r, col: c }, piece });\n    }\n  });\n  return moves;\n}\n\nfunction generateBishopMoves(board, pos, piece) {\n  let moves = [];\n  let directions = [\n    [1, 1],\n    [1, -1],\n    [-1, 1],\n    [-1, -1],\n  ];\n  directions.forEach((d) => {\n    for (let steps = 1; steps < 8; steps++) {\n      let r = pos.row + d[0] * steps;\n      let c = pos.col + d[1] * steps;\n      if (!isInBounds(r, c)) break;\n\n      // Skip if destination is occupied by a friendly piece\n      let destSquare = board[r][c];\n      if (destSquare && destSquare.color === piece.color) continue;\n\n      let standardPathValid = true;\n      let modifiedPawnCount = 0;\n      let modifiedPathValid = true;\n\n      // Check standard path validity (all intermediate squares empty)\n      for (let s = 1; s < steps; s++) {\n        let currentR = pos.row + d[0] * s;\n        let currentC = pos.col + d[1] * s;\n        if (board[currentR][currentC] !== null) {\n          standardPathValid = false;\n          break;\n        }\n      }\n\n      // Check modified path validity (exactly one pawn in intermediate squares)\n      for (let s = 1; s < steps; s++) {\n        let currentR = pos.row + d[0] * s;\n        let currentC = pos.col + d[1] * s;\n        let square = board[currentR][currentC];\n        if (square) {\n          if (square.type === 'pawn') {\n            modifiedPawnCount++;\n            if (modifiedPawnCount > 1) {\n              modifiedPathValid = false;\n              break;\n            }\n          } else {\n            modifiedPathValid = false;\n            break;\n          }\n        }\n      }\n      modifiedPathValid = modifiedPathValid && modifiedPawnCount === 1;\n\n      // Add move if either path is valid\n      if (standardPathValid || modifiedPathValid) {\n        moves.push({ from: pos, to: { row: r, col: c }, piece });\n      }\n    }\n  });\n  return moves;\n}\n\nfunction generateQueenMoves(board, pos, piece) {\n  // Queen moves = default rook moves (no prime restriction) + bishop moves\n  return generateRookMovesDefault(board, pos, piece).concat(\n    generateBishopMoves(board, pos, piece)\n  );\n}\n\nfunction generateKingMoves(board, pos, piece) {\n  let moves = [];\n  for (let r = pos.row - 1; r <= pos.row + 1; r++) {\n    for (let c = pos.col - 1; c <= pos.col + 1; c++) {\n      if (r === pos.row && c === pos.col) continue;\n      if (isInBounds(r, c) && (!board[r][c] || board[r][c].color !== piece.color)) {\n        moves.push({ from: pos, to: { row: r, col: c }, piece });\n      }\n    }\n  }\n  return moves;\n}\n\nfunction generateCastlingMoves(board, pos, king) {\n  let moves = [];\n  if (king.hasMoved) return moves;\n  if (canCastle(board, king, { side: \"kingside\", pos })) {\n    moves.push({\n      from: pos,\n      to: { row: pos.row, col: pos.col + 2 },\n      piece: king,\n      castle: \"kingside\",\n    });\n  }\n  if (canCastle(board, king, { side: \"queenside\", pos })) {\n    moves.push({\n      from: pos,\n      to: { row: pos.row, col: pos.col - 2 },\n      piece: king,\n      castle: \"queenside\",\n    });\n  }\n  return moves;\n}\n\n/* ----- CASTLING LOGIC ----- */\nfunction canCastle(board, king, { side, pos }) {\n  let row = pos.row;\n  if (king.hasMoved) return false;\n  if (side === \"kingside\") {\n    let rook = board[row][7];\n    if (!rook || rook.type !== \"rook\" || rook.hasMoved) return false;\n    if (board[row][5] !== null || board[row][6] !== null) return false;\n    if (\n      !isSquareSafeForKing(board, { row, col: 4 }, king.color) ||\n      !isSquareSafeForKing(board, { row, col: 5 }, king.color) ||\n      !isSquareSafeForKing(board, { row, col: 6 }, king.color)\n    )\n      return false;\n    return true;\n  } else if (side === \"queenside\") {\n    let rook = board[row][0];\n    if (!rook || rook.type !== \"rook\" || rook.hasMoved) return false;\n    if (board[row][1] !== null || board[row][2] !== null || board[row][3] !== null)\n      return false;\n    if (\n      !isSquareSafeForKing(board, { row, col: 4 }, king.color) ||\n      !isSquareSafeForKing(board, { row, col: 3 }, king.color) ||\n      !isSquareSafeForKing(board, { row, col: 2 }, king.color)\n    )\n      return false;\n    return true;\n  }\n  return false;\n}\n\nfunction isSquareSafeForKing(board, pos, color) {\n  let tempBoard = cloneBoard(board);\n  tempBoard[pos.row][pos.col] = { type: \"king\", color, hasMoved: true };\n  return isKingSafe(tempBoard, color);\n}\n\n/* ----- HELPER FUNCTIONS ----- */\nfunction isInBounds(row, col) {\n  return row >= 0 && row < 8 && col >= 0 && col < 8;\n}\n\nfunction cloneBoard(board) {\n  return board.map((row) => row.map((cell) => (cell ? { ...cell } : null)));\n}\n\nfunction isKingSafe(board, color) {\n  let kingPos = findKing(board, color);\n  if (!kingPos) return false;\n  return !isSquareAttacked(board, kingPos, getOpponent(color));\n}\n\nfunction findKing(board, color) {\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      let piece = board[r][c];\n      if (piece && piece.type === \"king\" && piece.color === color) {\n        return { row: r, col: c };\n      }\n    }\n  }\n  return null;\n}\n\nfunction isSquareAttacked(board, pos, attackerColor) {\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      let piece = board[r][c];\n      if (piece && piece.color === attackerColor) {\n        let moves;\n        if (piece.type === \"rook\") {\n          // For enemy rooks, use full-range moves (default) for attack detection.\n          moves = generateRookMovesDefault(board, { row: r, col: c }, piece);\n        } else {\n          moves = generateMovesForPiece(board, { row: r, col: c });\n        }\n        for (let move of moves) {\n          if (move.to.row === pos.row && move.to.col === pos.col) return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nfunction getOpponent(color) {\n  return color === \"white\" ? \"black\" : \"white\";\n}\n\n/* ----- EN PASSANT LOGIC ----- */\nfunction handlePawnDoubleStep(move) {\n  if (\n    move.piece.type === \"pawn\" &&\n    Math.abs(move.from.row - move.to.row) === 2\n  ) {\n    enPassantTarget = {\n      row: (move.from.row + move.to.row) / 2,\n      col: move.from.col,\n    };\n  } else {\n    enPassantTarget = null;\n  }\n}\n\nfunction isEnPassantMove(move) {\n  return (\n    move.piece.type === \"pawn\" &&\n    move.from.col !== move.to.col &&\n    board[move.to.row][move.to.col] === null\n  );\n}\n\nfunction performEnPassant(move) {\n  board[move.to.row][move.to.col] = move.piece;\n  board[move.from.row][move.from.col] = null;\n  let captureRow = move.piece.color === \"white\" ? move.to.row + 1 : move.to.row - 1;\n  board[captureRow][move.to.col] = null;\n}\n\n/* ----- CASTLING HANDLING ----- */\nfunction isCastlingMove(move) {\n  return (\n    move.piece.type === \"king\" && Math.abs(move.to.col - move.from.col) === 2\n  );\n}\n\nfunction performCastle(move) {\n  let row = move.from.row;\n  if (move.castle === \"kingside\") {\n    board[row][6] = move.piece;\n    board[row][4] = null;\n    let rook = board[row][7];\n    board[row][5] = rook;\n    board[row][7] = null;\n    rook.hasMoved = true;\n  } else if (move.castle === \"queenside\") {\n    board[row][2] = move.piece;\n    board[row][4] = null;\n    let rook = board[row][0];\n    board[row][3] = rook;\n    board[row][0] = null;\n    rook.hasMoved = true;\n  }\n}\n\n/* ----- PAWN PROMOTION ----- */\nfunction isLastRank(pos, color) {\n  return (color === \"white\" && pos.row === 0) || (color === \"black\" && pos.row === 7);\n}\n\nfunction showPromotionModal(move) {\n  promotionModal.style.display = \"block\";\n  promotionModal.dataset.fromRow = move.from.row;\n  promotionModal.dataset.fromCol = move.from.col;\n  promotionModal.dataset.toRow = move.to.row;\n  promotionModal.dataset.toCol = move.to.col;\n  promotionModal.dataset.color = move.piece.color;\n  promotionModal.dataset.pieceType = move.piece.type;\n}\n\npromotionChoices.forEach((choice) => {\n  choice.addEventListener(\"click\", function () {\n    let selectedType = this.dataset.type;\n    let move = {\n      from: {\n        row: parseInt(promotionModal.dataset.fromRow),\n        col: parseInt(promotionModal.dataset.fromCol),\n      },\n      to: {\n        row: parseInt(promotionModal.dataset.toRow),\n        col: parseInt(promotionModal.dataset.toCol),\n      },\n      piece: {\n        type: promotionModal.dataset.pieceType,\n        color: promotionModal.dataset.color,\n      },\n    };\n    board[move.to.row][move.to.col] = createPiece(selectedType, move.piece.color);\n    board[move.from.row][move.from.col] = null;\n    promotionModal.style.display = \"none\";\n    board[move.to.row][move.to.col].hasMoved = true;\n    moveHistory.push(move);\n    updateFiftyMoveCounter(move);\n    updateBoardHistory();\n    if (checkForCheckmate(board, getOpponent(currentPlayer))) {\n      alert(\"Checkmate! \" + getOpponent(currentPlayer) + \" wins.\");\n      clearInterval(clockInterval);\n      resetGame();\n      return;\n    } else if (checkForStalemate(board, getOpponent(currentPlayer))) {\n      alert(\"Stalemate!\");\n      clearInterval(clockInterval);\n      resetGame();\n      return;\n    }\n    currentPlayer = getOpponent(currentPlayer);\n    startClock();\n    selectedPiece = null;\n    selectedPos = null;\n    drawBoard();\n  });\n});\n\n/* ----- BOARD HISTORY & DRAWING RULES ----- */\nfunction serializeBoard(board) {\n  return board\n    .map((row) =>\n      row.map((cell) => (cell ? cell.type[0] + cell.color[0] : \"  \")).join(\"\")\n    )\n    .join(\"|\");\n}\n\nfunction updateBoardHistory() {\n  boardHistory.push(serializeBoard(board));\n}\n\nfunction isThreefoldRepetition() {\n  let counts = {};\n  boardHistory.forEach((state) => {\n    counts[state] = (counts[state] || 0) + 1;\n  });\n  return Object.values(counts).some((count) => count >= 3);\n}\n\nfunction updateFiftyMoveCounter(move) {\n  if (move.piece.type === \"pawn\" || board[move.to.row][move.to.col] !== null) {\n    fiftyMoveCounter = 0;\n  } else {\n    fiftyMoveCounter++;\n  }\n}\n\nfunction isFiftyMoveRule() {\n  return fiftyMoveCounter >= 50;\n}\n\n/* ----- CHECKMATE & STALEMATE ----- */\n// Checkmate: the current player's king is in check and has no legal moves.\nfunction checkForCheckmate(board, color) {\n  if (!isKingSafe(board, color)) {\n    let moves = generateAllMoves(board, color);\n    let legalMoves = moves.filter((m) => isLegalMove(board, m, color));\n    if (legalMoves.length === 0) {\n      console.log(\"Checkmate detected for\", color);\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction checkForStalemate(board, color) {\n  if (isKingSafe(board, color)) {\n    let moves = generateAllMoves(board, color);\n    let legalMoves = moves.filter((m) => isLegalMove(board, m, color));\n    if (legalMoves.length === 0) return true;\n  }\n  return false;\n}\n\nfunction generateAllMoves(board, color) {\n  let moves = [];\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      let piece = board[r][c];\n      if (piece && piece.color === color) {\n        moves = moves.concat(generateMovesForPiece(board, { row: r, col: c }));\n      }\n    }\n  }\n  return moves;\n}\n\n/* ----- MOVE VALIDATION ----- */\nfunction isLegalMove(board, move, color) {\n  let moves = generateMovesForPiece(board, move.from);\n  let legal = moves.some(\n    (m) => m.to.row === move.to.row && m.to.col === move.to.col\n  );\n  if (!legal) {\n    console.log(\"Move not in generated moves:\", move);\n    return false;\n  }\n\n  let newBoard = cloneBoard(board);\n  newBoard[move.to.row][move.to.col] = newBoard[move.from.row][move.from.col];\n  newBoard[move.from.row][move.from.col] = null;\n\n  let kingPos = findKing(newBoard, color);\n  if (!kingPos) {\n    console.log(\"King not found after move:\", move);\n    return false;\n  }\n\n  if (!isKingSafe(newBoard, color)) {\n    console.log(\"King would be in check after move:\", move, \"King at:\", kingPos);\n    return false;\n  }\n\n  return true;\n}\n\n/* ----- END GAME INITIALIZATION ----- */\n// Only initialize if running in browser\nif (typeof process === 'undefined' || !process.env.NODE_ENV === 'test') {\n  initializeBoard();\n}\n\n\n// Export for Jest testing while maintaining browser compatibility\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = {\n    isPrime,\n    generateRookMoves,\n    generatePawnMoves,\n    isLegalMove,\n    initializeBoard,\n    checkForCheckmate,\n    isSquareAttacked,\n    serializeBoard,\n    cloneBoard,\n    getOpponent,\n    performCastle,\n    canCastle,\n    isEnPassantMove,\n    generateMovesForPiece,\n    isInBounds,\n    isKingSafe,\n    createPiece,\n    enPassantTarget\n  };\n}"],"mappings":"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","ignoreList":[]}},"mtime":1743345741490}}